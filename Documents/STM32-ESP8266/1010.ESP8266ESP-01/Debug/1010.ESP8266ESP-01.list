
1010.ESP8266ESP-01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049ac  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004b58  08004b58  00014b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bf0  08004bf0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bf8  08004bf8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf8  08004bf8  00014bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bfc  08004bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007f8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000868  20000868  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001046e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000217a  00000000  00000000  0003050e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  00032688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bc8  00000000  00000000  00033318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e47  00000000  00000000  00033ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e123  00000000  00000000  00058d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbde0  00000000  00000000  00066e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142c2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b2c  00000000  00000000  00142c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004b40 	.word	0x08004b40

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08004b40 	.word	0x08004b40

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <__io_putchar>:
    * @brief  Retargets the C library printf function to the USART.
    * @param  None
    * @retval None
    */
  PUTCHAR_PROTOTYPE   // Add for printf
  {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80004f8:	1d39      	adds	r1, r7, #4
 80004fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004fe:	2201      	movs	r2, #1
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <__io_putchar+0x20>)
 8000502:	f002 fa8c 	bl	8002a1e <HAL_UART_Transmit>

    return ch;
 8000506:	687b      	ldr	r3, [r7, #4]
  }
 8000508:	4618      	mov	r0, r3
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200002b4 	.word	0x200002b4

08000514 <HAL_UART_RxCpltCallback>:
  //----------  printf end ----------
// wifi module receive callback function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	printf("recv\n");
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <HAL_UART_RxCpltCallback+0x18>)
 800051e:	f003 fe7f 	bl	8004220 <puts>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	08004b58 	.word	0x08004b58

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b092      	sub	sp, #72	; 0x48
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fd49 	bl	8000fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f847 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f97f 	bl	8000840 <MX_GPIO_Init>
  MX_ETH_Init();
 8000542:	f000 f8ad 	bl	80006a0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000546:	f000 f923 	bl	8000790 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800054a:	f000 f94b 	bl	80007e4 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 800054e:	f000 f8f5 	bl	800073c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char atCommand[] = "AT+RST\r\n";  // AT 명령어
 8000552:	4a1b      	ldr	r2, [pc, #108]	; (80005c0 <main+0x90>)
 8000554:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000558:	ca07      	ldmia	r2, {r0, r1, r2}
 800055a:	c303      	stmia	r3!, {r0, r1}
 800055c:	701a      	strb	r2, [r3, #0]
	  char rxBuffer[50];  // 응답을 저장할 버퍼
	  HAL_UART_Transmit(&huart2, (uint8_t*)atCommand, sizeof(atCommand), HAL_MAX_DELAY);  // AT 명령어 전송
 800055e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
 8000566:	2209      	movs	r2, #9
 8000568:	4816      	ldr	r0, [pc, #88]	; (80005c4 <main+0x94>)
 800056a:	f002 fa58 	bl	8002a1e <HAL_UART_Transmit>
	  //printf("Sending: %s\n", atCommand);  // 응답 출력
	  HAL_Delay(100);
 800056e:	2064      	movs	r0, #100	; 0x64
 8000570:	f000 fd9e 	bl	80010b0 <HAL_Delay>
	  HAL_UART_Receive(&huart2, (uint8_t*)rxBuffer, sizeof(rxBuffer), HAL_MAX_DELAY);   // 응답 수신
 8000574:	4639      	mov	r1, r7
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	2232      	movs	r2, #50	; 0x32
 800057c:	4811      	ldr	r0, [pc, #68]	; (80005c4 <main+0x94>)
 800057e:	f002 fae0 	bl	8002b42 <HAL_UART_Receive>
	  //printf("Response: %s\n", rxBuffer);  // 응답 출력
	  HAL_Delay(1000);
 8000582:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000586:	f000 fd93 	bl	80010b0 <HAL_Delay>
	  char atCommand1[] = "AT\r\n";  // AT 명령어
 800058a:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <main+0x98>)
 800058c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000590:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000594:	6018      	str	r0, [r3, #0]
 8000596:	3304      	adds	r3, #4
 8000598:	7019      	strb	r1, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)atCommand1, sizeof(atCommand1), HAL_MAX_DELAY);  // AT 명령어 전송
 800059a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	2205      	movs	r2, #5
 80005a4:	4807      	ldr	r0, [pc, #28]	; (80005c4 <main+0x94>)
 80005a6:	f002 fa3a 	bl	8002a1e <HAL_UART_Transmit>
	  //printf("Sending: %s\n", atCommand1);  // 응답 출력
	  HAL_Delay(100);
 80005aa:	2064      	movs	r0, #100	; 0x64
 80005ac:	f000 fd80 	bl	80010b0 <HAL_Delay>
	  HAL_UART_Receive(&huart2, (uint8_t*)rxBuffer, sizeof(rxBuffer), HAL_MAX_DELAY);   // 응답 수신
 80005b0:	4639      	mov	r1, r7
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295
 80005b6:	2232      	movs	r2, #50	; 0x32
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <main+0x94>)
 80005ba:	f002 fac2 	bl	8002b42 <HAL_UART_Receive>
  {
 80005be:	e7c8      	b.n	8000552 <main+0x22>
 80005c0:	08004b60 	.word	0x08004b60
 80005c4:	200002b4 	.word	0x200002b4
 80005c8:	08004b6c 	.word	0x08004b6c

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fdaa 	bl	8004134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <SystemClock_Config+0xd0>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800062c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000640:	23a8      	movs	r3, #168	; 0xa8
 8000642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000648:	2307      	movs	r3, #7
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fcff 	bl	8002054 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 f99e 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2105      	movs	r1, #5
 800067e:	4618      	mov	r0, r3
 8000680:	f001 ff60 	bl	8002544 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068a:	f000 f987 	bl	800099c <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	; 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <MX_ETH_Init+0x84>)
 80006a6:	4a20      	ldr	r2, [pc, #128]	; (8000728 <MX_ETH_Init+0x88>)
 80006a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <MX_ETH_Init+0x8c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <MX_ETH_Init+0x8c>)
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_ETH_Init+0x8c>)
 80006b8:	22e1      	movs	r2, #225	; 0xe1
 80006ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_ETH_Init+0x8c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_ETH_Init+0x8c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_ETH_Init+0x8c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_ETH_Init+0x84>)
 80006d0:	4a16      	ldr	r2, [pc, #88]	; (800072c <MX_ETH_Init+0x8c>)
 80006d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_ETH_Init+0x84>)
 80006d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006da:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_ETH_Init+0x84>)
 80006de:	4a14      	ldr	r2, [pc, #80]	; (8000730 <MX_ETH_Init+0x90>)
 80006e0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_ETH_Init+0x84>)
 80006e4:	4a13      	ldr	r2, [pc, #76]	; (8000734 <MX_ETH_Init+0x94>)
 80006e6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_ETH_Init+0x84>)
 80006ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006ee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <MX_ETH_Init+0x84>)
 80006f2:	f000 fea5 	bl	8001440 <HAL_ETH_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006fc:	f000 f94e 	bl	800099c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000700:	2238      	movs	r2, #56	; 0x38
 8000702:	2100      	movs	r1, #0
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <MX_ETH_Init+0x98>)
 8000706:	f003 fd15 	bl	8004134 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_ETH_Init+0x98>)
 800070c:	2221      	movs	r2, #33	; 0x21
 800070e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_ETH_Init+0x98>)
 8000712:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000716:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_ETH_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000204 	.word	0x20000204
 8000728:	40028000 	.word	0x40028000
 800072c:	20000848 	.word	0x20000848
 8000730:	20000164 	.word	0x20000164
 8000734:	200000c4 	.word	0x200000c4
 8000738:	2000008c 	.word	0x2000008c

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART2_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000774:	f002 f906 	bl	8002984 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f90d 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200002b4 	.word	0x200002b4
 800078c:	40004400 	.word	0x40004400

08000790 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <MX_USART3_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 800079c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007c8:	f002 f8dc 	bl	8002984 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 f8e3 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200002f8 	.word	0x200002f8
 80007e0:	40004800 	.word	0x40004800

080007e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	2204      	movs	r2, #4
 80007f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000804:	2202      	movs	r2, #2
 8000806:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	2201      	movs	r2, #1
 800080c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2201      	movs	r2, #1
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	f001 faf7 	bl	8001e1a <HAL_PCD_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000832:	f000 f8b3 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000033c 	.word	0x2000033c

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
 800085a:	4b4c      	ldr	r3, [pc, #304]	; (800098c <MX_GPIO_Init+0x14c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a4b      	ldr	r2, [pc, #300]	; (800098c <MX_GPIO_Init+0x14c>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b49      	ldr	r3, [pc, #292]	; (800098c <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	61bb      	str	r3, [r7, #24]
 8000870:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	4b45      	ldr	r3, [pc, #276]	; (800098c <MX_GPIO_Init+0x14c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a44      	ldr	r2, [pc, #272]	; (800098c <MX_GPIO_Init+0x14c>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b42      	ldr	r3, [pc, #264]	; (800098c <MX_GPIO_Init+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b3e      	ldr	r3, [pc, #248]	; (800098c <MX_GPIO_Init+0x14c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a3d      	ldr	r2, [pc, #244]	; (800098c <MX_GPIO_Init+0x14c>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b3b      	ldr	r3, [pc, #236]	; (800098c <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b37      	ldr	r3, [pc, #220]	; (800098c <MX_GPIO_Init+0x14c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a36      	ldr	r2, [pc, #216]	; (800098c <MX_GPIO_Init+0x14c>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b34      	ldr	r3, [pc, #208]	; (800098c <MX_GPIO_Init+0x14c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	4b30      	ldr	r3, [pc, #192]	; (800098c <MX_GPIO_Init+0x14c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a2f      	ldr	r2, [pc, #188]	; (800098c <MX_GPIO_Init+0x14c>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b2d      	ldr	r3, [pc, #180]	; (800098c <MX_GPIO_Init+0x14c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b29      	ldr	r3, [pc, #164]	; (800098c <MX_GPIO_Init+0x14c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a28      	ldr	r2, [pc, #160]	; (800098c <MX_GPIO_Init+0x14c>)
 80008ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b26      	ldr	r3, [pc, #152]	; (800098c <MX_GPIO_Init+0x14c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f244 0181 	movw	r1, #16513	; 0x4081
 8000904:	4822      	ldr	r0, [pc, #136]	; (8000990 <MX_GPIO_Init+0x150>)
 8000906:	f001 fa6f 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	4821      	ldr	r0, [pc, #132]	; (8000994 <MX_GPIO_Init+0x154>)
 8000910:	f001 fa6a 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	481b      	ldr	r0, [pc, #108]	; (8000998 <MX_GPIO_Init+0x158>)
 800092c:	f001 f8b0 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000930:	f244 0381 	movw	r3, #16513	; 0x4081
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4811      	ldr	r0, [pc, #68]	; (8000990 <MX_GPIO_Init+0x150>)
 800094a:	f001 f8a1 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800094e:	2340      	movs	r3, #64	; 0x40
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <MX_GPIO_Init+0x154>)
 8000966:	f001 f893 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_GPIO_Init+0x154>)
 800097e:	f001 f887 	bl	8001a90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000982:	bf00      	nop
 8000984:	3730      	adds	r7, #48	; 0x30
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40020400 	.word	0x40020400
 8000994:	40021800 	.word	0x40021800
 8000998:	40020800 	.word	0x40020800

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <HAL_MspInit+0x4c>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	; 0x44
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_MspInit+0x4c>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	; 0x38
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a55      	ldr	r2, [pc, #340]	; (8000b6c <HAL_ETH_MspInit+0x174>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	f040 80a4 	bne.w	8000b64 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
 8000a20:	4b53      	ldr	r3, [pc, #332]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	4a52      	ldr	r2, [pc, #328]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2c:	4b50      	ldr	r3, [pc, #320]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a34:	623b      	str	r3, [r7, #32]
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
 8000a3c:	4b4c      	ldr	r3, [pc, #304]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	4a4b      	ldr	r2, [pc, #300]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a46:	6313      	str	r3, [r2, #48]	; 0x30
 8000a48:	4b49      	ldr	r3, [pc, #292]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a50:	61fb      	str	r3, [r7, #28]
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	4b45      	ldr	r3, [pc, #276]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	4a44      	ldr	r2, [pc, #272]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a62:	6313      	str	r3, [r2, #48]	; 0x30
 8000a64:	4b42      	ldr	r3, [pc, #264]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a6c:	61bb      	str	r3, [r7, #24]
 8000a6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	4b3e      	ldr	r3, [pc, #248]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a3d      	ldr	r2, [pc, #244]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a80:	4b3b      	ldr	r3, [pc, #236]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	4b37      	ldr	r3, [pc, #220]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	4a36      	ldr	r2, [pc, #216]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9c:	4b34      	ldr	r3, [pc, #208]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab8:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a28      	ldr	r2, [pc, #160]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad4:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <HAL_ETH_MspInit+0x178>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ae0:	2332      	movs	r3, #50	; 0x32
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af0:	230b      	movs	r3, #11
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	481e      	ldr	r0, [pc, #120]	; (8000b74 <HAL_ETH_MspInit+0x17c>)
 8000afc:	f000 ffc8 	bl	8001a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b00:	2386      	movs	r3, #134	; 0x86
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b10:	230b      	movs	r3, #11
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4817      	ldr	r0, [pc, #92]	; (8000b78 <HAL_ETH_MspInit+0x180>)
 8000b1c:	f000 ffb8 	bl	8001a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b32:	230b      	movs	r3, #11
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480f      	ldr	r0, [pc, #60]	; (8000b7c <HAL_ETH_MspInit+0x184>)
 8000b3e:	f000 ffa7 	bl	8001a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b54:	230b      	movs	r3, #11
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4808      	ldr	r0, [pc, #32]	; (8000b80 <HAL_ETH_MspInit+0x188>)
 8000b60:	f000 ff96 	bl	8001a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3738      	adds	r7, #56	; 0x38
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40028000 	.word	0x40028000
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020800 	.word	0x40020800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40021800 	.word	0x40021800

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	; 0x30
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a49      	ldr	r2, [pc, #292]	; (8000cc8 <HAL_UART_MspInit+0x144>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d152      	bne.n	8000c4c <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	4b48      	ldr	r3, [pc, #288]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a47      	ldr	r2, [pc, #284]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b45      	ldr	r3, [pc, #276]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	4b41      	ldr	r3, [pc, #260]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a40      	ldr	r2, [pc, #256]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b3e      	ldr	r3, [pc, #248]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a39      	ldr	r2, [pc, #228]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b37      	ldr	r3, [pc, #220]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bfa:	2308      	movs	r3, #8
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	482e      	ldr	r0, [pc, #184]	; (8000cd0 <HAL_UART_MspInit+0x14c>)
 8000c16:	f000 ff3b 	bl	8001a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c1a:	2320      	movs	r3, #32
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4827      	ldr	r0, [pc, #156]	; (8000cd4 <HAL_UART_MspInit+0x150>)
 8000c36:	f000 ff2b 	bl	8001a90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2026      	movs	r0, #38	; 0x26
 8000c40:	f000 fb35 	bl	80012ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c44:	2026      	movs	r0, #38	; 0x26
 8000c46:	f000 fb4e 	bl	80012e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c4a:	e039      	b.n	8000cc0 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <HAL_UART_MspInit+0x154>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d134      	bne.n	8000cc0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_UART_MspInit+0x148>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480a      	ldr	r0, [pc, #40]	; (8000cd4 <HAL_UART_MspInit+0x150>)
 8000cac:	f000 fef0 	bl	8001a90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2027      	movs	r0, #39	; 0x27
 8000cb6:	f000 fafa 	bl	80012ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cba:	2027      	movs	r0, #39	; 0x27
 8000cbc:	f000 fb13 	bl	80012e6 <HAL_NVIC_EnableIRQ>
}
 8000cc0:	bf00      	nop
 8000cc2:	3730      	adds	r7, #48	; 0x30
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40004400 	.word	0x40004400
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40020c00 	.word	0x40020c00
 8000cd8:	40004800 	.word	0x40004800

08000cdc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cfc:	d13f      	bne.n	8000d7e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d1a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4815      	ldr	r0, [pc, #84]	; (8000d8c <HAL_PCD_MspInit+0xb0>)
 8000d38:	f000 feaa 	bl	8001a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480e      	ldr	r0, [pc, #56]	; (8000d8c <HAL_PCD_MspInit+0xb0>)
 8000d52:	f000 fe9d 	bl	8001a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	6353      	str	r3, [r2, #52]	; 0x34
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f948 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <USART2_IRQHandler+0x10>)
 8000dea:	f001 ff4d 	bl	8002c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200002b4 	.word	0x200002b4

08000df8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <USART3_IRQHandler+0x10>)
 8000dfe:	f001 ff43 	bl	8002c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200002f8 	.word	0x200002f8

08000e0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	e00a      	b.n	8000e34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e1e:	f3af 8000 	nop.w
 8000e22:	4601      	mov	r1, r0
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	60ba      	str	r2, [r7, #8]
 8000e2a:	b2ca      	uxtb	r2, r1
 8000e2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3301      	adds	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbf0      	blt.n	8000e1e <_read+0x12>
  }

  return len;
 8000e3c:	687b      	ldr	r3, [r7, #4]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	e009      	b.n	8000e6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	60ba      	str	r2, [r7, #8]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fb45 	bl	80004f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbf1      	blt.n	8000e58 <_write+0x12>
  }
  return len;
 8000e74:	687b      	ldr	r3, [r7, #4]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <_close>:

int _close(int file)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <_isatty>:

int _isatty(int file)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <_sbrk+0x5c>)
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <_sbrk+0x60>)
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <_sbrk+0x64>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <_sbrk+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d207      	bcs.n	8000f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f18:	f003 f8e2 	bl	80040e0 <__errno>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	220c      	movs	r2, #12
 8000f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	e009      	b.n	8000f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <_sbrk+0x64>)
 8000f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20030000 	.word	0x20030000
 8000f48:	00000400 	.word	0x00000400
 8000f4c:	20000850 	.word	0x20000850
 8000f50:	20000868 	.word	0x20000868

08000f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <SystemInit+0x20>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <SystemInit+0x20>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f7e:	490e      	ldr	r1, [pc, #56]	; (8000fb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f80:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f94:	4c0b      	ldr	r4, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa2:	f7ff ffd7 	bl	8000f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f003 f8a1 	bl	80040ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000faa:	f7ff fac1 	bl	8000530 <main>
  bx  lr    
 8000fae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fb0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fbc:	08004c00 	.word	0x08004c00
  ldr r2, =_sbss
 8000fc0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fc4:	20000868 	.word	0x20000868

08000fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC_IRQHandler>
	...

08000fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <HAL_Init+0x40>)
 8000fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0a      	ldr	r2, [pc, #40]	; (800100c <HAL_Init+0x40>)
 8000fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a07      	ldr	r2, [pc, #28]	; (800100c <HAL_Init+0x40>)
 8000fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 f94f 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 f808 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001000:	f7ff fcd2 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023c00 	.word	0x40023c00

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x54>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x58>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f967 	bl	8001302 <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00e      	b.n	800105c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d80a      	bhi.n	800105a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f000 f92f 	bl	80012ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <HAL_InitTick+0x5c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000000 	.word	0x20000000
 8001068:	20000008 	.word	0x20000008
 800106c:	20000004 	.word	0x20000004

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000008 	.word	0x20000008
 8001094:	20000854 	.word	0x20000854

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000854 	.word	0x20000854

080010b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff ffee 	bl	8001098 <HAL_GetTick>
 80010bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c8:	d005      	beq.n	80010d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_Delay+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010d6:	bf00      	nop
 80010d8:	f7ff ffde 	bl	8001098 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d8f7      	bhi.n	80010d8 <HAL_Delay+0x28>
  {
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000008 	.word	0x20000008

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	60d3      	str	r3, [r2, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	db0b      	blt.n	8001186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f003 021f 	and.w	r2, r3, #31
 8001174:	4907      	ldr	r1, [pc, #28]	; (8001194 <__NVIC_EnableIRQ+0x38>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	2001      	movs	r0, #1
 800117e:	fa00 f202 	lsl.w	r2, r0, r2
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e100 	.word	0xe000e100

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff8e 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff29 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c0:	f7ff ff3e 	bl	8001140 <__NVIC_GetPriorityGrouping>
 80012c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	6978      	ldr	r0, [r7, #20]
 80012cc:	f7ff ff8e 	bl	80011ec <NVIC_EncodePriority>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff5d 	bl	8001198 <__NVIC_SetPriority>
}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff31 	bl	800115c <__NVIC_EnableIRQ>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffa2 	bl	8001254 <SysTick_Config>
 8001310:	4603      	mov	r3, r0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff feb6 	bl	8001098 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d008      	beq.n	800134c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e052      	b.n	80013f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0216 	bic.w	r2, r2, #22
 800135a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	695a      	ldr	r2, [r3, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800136a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	2b00      	cmp	r3, #0
 8001372:	d103      	bne.n	800137c <HAL_DMA_Abort+0x62>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001378:	2b00      	cmp	r3, #0
 800137a:	d007      	beq.n	800138c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0208 	bic.w	r2, r2, #8
 800138a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0201 	bic.w	r2, r2, #1
 800139a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800139c:	e013      	b.n	80013c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800139e:	f7ff fe7b 	bl	8001098 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b05      	cmp	r3, #5
 80013aa:	d90c      	bls.n	80013c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2220      	movs	r2, #32
 80013b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2203      	movs	r2, #3
 80013b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e015      	b.n	80013f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1e4      	bne.n	800139e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	223f      	movs	r2, #63	; 0x3f
 80013da:	409a      	lsls	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d004      	beq.n	8001418 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2280      	movs	r2, #128	; 0x80
 8001412:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e00c      	b.n	8001432 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2205      	movs	r2, #5
 800141c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e06c      	b.n	800152c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001458:	2b00      	cmp	r3, #0
 800145a:	d106      	bne.n	800146a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2223      	movs	r2, #35	; 0x23
 8001460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fac7 	bl	80009f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b31      	ldr	r3, [pc, #196]	; (8001534 <HAL_ETH_Init+0xf4>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a30      	ldr	r2, [pc, #192]	; (8001534 <HAL_ETH_Init+0xf4>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <HAL_ETH_Init+0xf4>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001486:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <HAL_ETH_Init+0xf8>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4a2b      	ldr	r2, [pc, #172]	; (8001538 <HAL_ETH_Init+0xf8>)
 800148c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001490:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <HAL_ETH_Init+0xf8>)
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	4927      	ldr	r1, [pc, #156]	; (8001538 <HAL_ETH_Init+0xf8>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <HAL_ETH_Init+0xf8>)
 80014a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014bc:	f7ff fdec 	bl	8001098 <HAL_GetTick>
 80014c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014c2:	e011      	b.n	80014e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014c4:	f7ff fde8 	bl	8001098 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014d2:	d909      	bls.n	80014e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2204      	movs	r2, #4
 80014d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	22e0      	movs	r2, #224	; 0xe0
 80014e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e021      	b.n	800152c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1e4      	bne.n	80014c4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f958 	bl	80017b0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f9ff 	bl	8001904 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fa55 	bl	80019b6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	461a      	mov	r2, r3
 8001512:	2100      	movs	r1, #0
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f9bd 	bl	8001894 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2210      	movs	r2, #16
 8001526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40023800 	.word	0x40023800
 8001538:	40013800 	.word	0x40013800

0800153c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4b51      	ldr	r3, [pc, #324]	; (8001698 <ETH_SetMACConfig+0x15c>)
 8001552:	4013      	ands	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	7c1b      	ldrb	r3, [r3, #16]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <ETH_SetMACConfig+0x28>
 800155e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001562:	e000      	b.n	8001566 <ETH_SetMACConfig+0x2a>
 8001564:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	7c5b      	ldrb	r3, [r3, #17]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <ETH_SetMACConfig+0x38>
 800156e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001572:	e000      	b.n	8001576 <ETH_SetMACConfig+0x3a>
 8001574:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001576:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800157c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	7fdb      	ldrb	r3, [r3, #31]
 8001582:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001584:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800158a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	7f92      	ldrb	r2, [r2, #30]
 8001590:	2a00      	cmp	r2, #0
 8001592:	d102      	bne.n	800159a <ETH_SetMACConfig+0x5e>
 8001594:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001598:	e000      	b.n	800159c <ETH_SetMACConfig+0x60>
 800159a:	2200      	movs	r2, #0
                        macconf->Speed |
 800159c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	7f1b      	ldrb	r3, [r3, #28]
 80015a2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015a4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	791b      	ldrb	r3, [r3, #4]
 80015b0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80015b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015ba:	2a00      	cmp	r2, #0
 80015bc:	d102      	bne.n	80015c4 <ETH_SetMACConfig+0x88>
 80015be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c2:	e000      	b.n	80015c6 <ETH_SetMACConfig+0x8a>
 80015c4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	7bdb      	ldrb	r3, [r3, #15]
 80015cc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015ce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015dc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015de:	4313      	orrs	r3, r2
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff fd5a 	bl	80010b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001612:	4013      	ands	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001622:	2a00      	cmp	r2, #0
 8001624:	d101      	bne.n	800162a <ETH_SetMACConfig+0xee>
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	e000      	b.n	800162c <ETH_SetMACConfig+0xf0>
 800162a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800162c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001632:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800163a:	2a01      	cmp	r2, #1
 800163c:	d101      	bne.n	8001642 <ETH_SetMACConfig+0x106>
 800163e:	2208      	movs	r2, #8
 8001640:	e000      	b.n	8001644 <ETH_SetMACConfig+0x108>
 8001642:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001644:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800164c:	2a01      	cmp	r2, #1
 800164e:	d101      	bne.n	8001654 <ETH_SetMACConfig+0x118>
 8001650:	2204      	movs	r2, #4
 8001652:	e000      	b.n	8001656 <ETH_SetMACConfig+0x11a>
 8001654:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001656:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800165e:	2a01      	cmp	r2, #1
 8001660:	d101      	bne.n	8001666 <ETH_SetMACConfig+0x12a>
 8001662:	2202      	movs	r2, #2
 8001664:	e000      	b.n	8001668 <ETH_SetMACConfig+0x12c>
 8001666:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001668:	4313      	orrs	r3, r2
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff fd15 	bl	80010b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	619a      	str	r2, [r3, #24]
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	ff20810f 	.word	0xff20810f

0800169c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <ETH_SetDMAConfig+0x110>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	7b1b      	ldrb	r3, [r3, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <ETH_SetDMAConfig+0x2c>
 80016c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016c6:	e000      	b.n	80016ca <ETH_SetDMAConfig+0x2e>
 80016c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	7b5b      	ldrb	r3, [r3, #13]
 80016ce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016d0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	7f52      	ldrb	r2, [r2, #29]
 80016d6:	2a00      	cmp	r2, #0
 80016d8:	d102      	bne.n	80016e0 <ETH_SetDMAConfig+0x44>
 80016da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016de:	e000      	b.n	80016e2 <ETH_SetDMAConfig+0x46>
 80016e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	7b9b      	ldrb	r3, [r3, #14]
 80016e8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016ea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	7f1b      	ldrb	r3, [r3, #28]
 80016f6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80016f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	7f9b      	ldrb	r3, [r3, #30]
 80016fe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001700:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001706:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800170e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001710:	4313      	orrs	r3, r2
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001720:	461a      	mov	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff fcbc 	bl	80010b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001740:	461a      	mov	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	791b      	ldrb	r3, [r3, #4]
 800174a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001750:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001756:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800175c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001764:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001766:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800176e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001774:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800177e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001782:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff fc8d 	bl	80010b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6013      	str	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	f8de3f23 	.word	0xf8de3f23

080017b0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b0a6      	sub	sp, #152	; 0x98
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017b8:	2301      	movs	r3, #1
 80017ba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80017da:	2301      	movs	r3, #1
 80017dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017ec:	2300      	movs	r3, #0
 80017ee:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001812:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001816:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800181c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001824:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001828:	4619      	mov	r1, r3
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fe86 	bl	800153c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001830:	2301      	movs	r3, #1
 8001832:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001834:	2301      	movs	r3, #1
 8001836:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001838:	2301      	movs	r3, #1
 800183a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800183e:	2301      	movs	r3, #1
 8001840:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001852:	2300      	movs	r3, #0
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001856:	2301      	movs	r3, #1
 8001858:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800185c:	2301      	movs	r3, #1
 800185e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001864:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001866:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800186a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800186c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001870:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001872:	2301      	movs	r3, #1
 8001874:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001878:	2300      	movs	r3, #0
 800187a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ff08 	bl	800169c <ETH_SetDMAConfig>
}
 800188c:	bf00      	nop
 800188e:	3798      	adds	r7, #152	; 0x98
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3305      	adds	r3, #5
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	3204      	adds	r2, #4
 80018ac:	7812      	ldrb	r2, [r2, #0]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <ETH_MACAddressConfig+0x68>)
 80018b6:	4413      	add	r3, r2
 80018b8:	461a      	mov	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3303      	adds	r3, #3
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	061a      	lsls	r2, r3, #24
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3302      	adds	r3, #2
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3301      	adds	r3, #1
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	4313      	orrs	r3, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	4313      	orrs	r3, r2
 80018e0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <ETH_MACAddressConfig+0x6c>)
 80018e6:	4413      	add	r3, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	6013      	str	r3, [r2, #0]
}
 80018ee:	bf00      	nop
 80018f0:	371c      	adds	r7, #28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40028040 	.word	0x40028040
 8001900:	40028044 	.word	0x40028044

08001904 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e03e      	b.n	8001990 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68d9      	ldr	r1, [r3, #12]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	3206      	adds	r2, #6
 8001944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d80c      	bhi.n	8001974 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68d9      	ldr	r1, [r3, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	461a      	mov	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	e004      	b.n	800197e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	461a      	mov	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3301      	adds	r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d9bd      	bls.n	8001912 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a8:	611a      	str	r2, [r3, #16]
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e046      	b.n	8001a52 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6919      	ldr	r1, [r3, #16]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	440b      	add	r3, r1
 80019d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2200      	movs	r2, #0
 80019e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a00:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001a08:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a16:	68b9      	ldr	r1, [r7, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	3212      	adds	r2, #18
 8001a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d80c      	bhi.n	8001a42 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6919      	ldr	r1, [r3, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	e004      	b.n	8001a4c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	461a      	mov	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d9b5      	bls.n	80019c4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a82:	60da      	str	r2, [r3, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e177      	b.n	8001d9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f040 8166 	bne.w	8001d96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d005      	beq.n	8001ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d130      	bne.n	8001b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 0201 	and.w	r2, r3, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d017      	beq.n	8001b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d123      	bne.n	8001bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	69b9      	ldr	r1, [r7, #24]
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80c0 	beq.w	8001d96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b66      	ldr	r3, [pc, #408]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	4a65      	ldr	r2, [pc, #404]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c24:	6453      	str	r3, [r2, #68]	; 0x44
 8001c26:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c32:	4a61      	ldr	r2, [pc, #388]	; (8001db8 <HAL_GPIO_Init+0x328>)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a58      	ldr	r2, [pc, #352]	; (8001dbc <HAL_GPIO_Init+0x32c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d037      	beq.n	8001cce <HAL_GPIO_Init+0x23e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a57      	ldr	r2, [pc, #348]	; (8001dc0 <HAL_GPIO_Init+0x330>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d031      	beq.n	8001cca <HAL_GPIO_Init+0x23a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a56      	ldr	r2, [pc, #344]	; (8001dc4 <HAL_GPIO_Init+0x334>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d02b      	beq.n	8001cc6 <HAL_GPIO_Init+0x236>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a55      	ldr	r2, [pc, #340]	; (8001dc8 <HAL_GPIO_Init+0x338>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d025      	beq.n	8001cc2 <HAL_GPIO_Init+0x232>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a54      	ldr	r2, [pc, #336]	; (8001dcc <HAL_GPIO_Init+0x33c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01f      	beq.n	8001cbe <HAL_GPIO_Init+0x22e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a53      	ldr	r2, [pc, #332]	; (8001dd0 <HAL_GPIO_Init+0x340>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d019      	beq.n	8001cba <HAL_GPIO_Init+0x22a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <HAL_GPIO_Init+0x344>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <HAL_GPIO_Init+0x226>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a51      	ldr	r2, [pc, #324]	; (8001dd8 <HAL_GPIO_Init+0x348>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00d      	beq.n	8001cb2 <HAL_GPIO_Init+0x222>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a50      	ldr	r2, [pc, #320]	; (8001ddc <HAL_GPIO_Init+0x34c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0x21e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4f      	ldr	r2, [pc, #316]	; (8001de0 <HAL_GPIO_Init+0x350>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_GPIO_Init+0x21a>
 8001ca6:	2309      	movs	r3, #9
 8001ca8:	e012      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001caa:	230a      	movs	r3, #10
 8001cac:	e010      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cae:	2308      	movs	r3, #8
 8001cb0:	e00e      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	e00c      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cb6:	2306      	movs	r3, #6
 8001cb8:	e00a      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cba:	2305      	movs	r3, #5
 8001cbc:	e008      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	e006      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e004      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e002      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	f002 0203 	and.w	r2, r2, #3
 8001cd6:	0092      	lsls	r2, r2, #2
 8001cd8:	4093      	lsls	r3, r2
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce0:	4935      	ldr	r1, [pc, #212]	; (8001db8 <HAL_GPIO_Init+0x328>)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cee:	4b3d      	ldr	r3, [pc, #244]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d12:	4a34      	ldr	r2, [pc, #208]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d3c:	4a29      	ldr	r2, [pc, #164]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d66:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b0f      	cmp	r3, #15
 8001da0:	f67f ae84 	bls.w	8001aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40013800 	.word	0x40013800
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	40020400 	.word	0x40020400
 8001dc4:	40020800 	.word	0x40020800
 8001dc8:	40020c00 	.word	0x40020c00
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40021400 	.word	0x40021400
 8001dd4:	40021800 	.word	0x40021800
 8001dd8:	40021c00 	.word	0x40021c00
 8001ddc:	40022000 	.word	0x40022000
 8001de0:	40022400 	.word	0x40022400
 8001de4:	40013c00 	.word	0x40013c00

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e04:	e003      	b.n	8001e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	041a      	lsls	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	619a      	str	r2, [r3, #24]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1c:	b08f      	sub	sp, #60	; 0x3c
 8001e1e:	af0a      	add	r7, sp, #40	; 0x28
 8001e20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e10f      	b.n	800204c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe ff48 	bl	8000cdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2203      	movs	r2, #3
 8001e50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 fe97 	bl	8003b9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	687e      	ldr	r6, [r7, #4]
 8001e78:	466d      	mov	r5, sp
 8001e7a:	f106 0410 	add.w	r4, r6, #16
 8001e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e8e:	1d33      	adds	r3, r6, #4
 8001e90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e92:	6838      	ldr	r0, [r7, #0]
 8001e94:	f001 fe22 	bl	8003adc <USB_CoreInit>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0d0      	b.n	800204c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f001 fe85 	bl	8003bc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]
 8001eba:	e04a      	b.n	8001f52 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	333d      	adds	r3, #61	; 0x3d
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	333c      	adds	r3, #60	; 0x3c
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	b298      	uxth	r0, r3
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3344      	adds	r3, #68	; 0x44
 8001ef8:	4602      	mov	r2, r0
 8001efa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	3340      	adds	r3, #64	; 0x40
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3348      	adds	r3, #72	; 0x48
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	334c      	adds	r3, #76	; 0x4c
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	3354      	adds	r3, #84	; 0x54
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	73fb      	strb	r3, [r7, #15]
 8001f52:	7bfa      	ldrb	r2, [r7, #15]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d3af      	bcc.n	8001ebc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e044      	b.n	8001fec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d3b5      	bcc.n	8001f62 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	687e      	ldr	r6, [r7, #4]
 8001ffe:	466d      	mov	r5, sp
 8002000:	f106 0410 	add.w	r4, r6, #16
 8002004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002010:	e885 0003 	stmia.w	r5, {r0, r1}
 8002014:	1d33      	adds	r3, r6, #4
 8002016:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002018:	6838      	ldr	r0, [r7, #0]
 800201a:	f001 fe1d 	bl	8003c58 <USB_DevInit>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e00d      	b.n	800204c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f001 ffe8 	bl	800401a <USB_DevDisconnect>

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002054 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e267      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d075      	beq.n	800215e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002072:	4b88      	ldr	r3, [pc, #544]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b04      	cmp	r3, #4
 800207c:	d00c      	beq.n	8002098 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800207e:	4b85      	ldr	r3, [pc, #532]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002086:	2b08      	cmp	r3, #8
 8002088:	d112      	bne.n	80020b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800208a:	4b82      	ldr	r3, [pc, #520]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002096:	d10b      	bne.n	80020b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	4b7e      	ldr	r3, [pc, #504]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d05b      	beq.n	800215c <HAL_RCC_OscConfig+0x108>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d157      	bne.n	800215c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e242      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b8:	d106      	bne.n	80020c8 <HAL_RCC_OscConfig+0x74>
 80020ba:	4b76      	ldr	r3, [pc, #472]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a75      	ldr	r2, [pc, #468]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e01d      	b.n	8002104 <HAL_RCC_OscConfig+0xb0>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x98>
 80020d2:	4b70      	ldr	r3, [pc, #448]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a6f      	ldr	r2, [pc, #444]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b6d      	ldr	r3, [pc, #436]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6c      	ldr	r2, [pc, #432]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_OscConfig+0xb0>
 80020ec:	4b69      	ldr	r3, [pc, #420]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a68      	ldr	r2, [pc, #416]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 80020f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b66      	ldr	r3, [pc, #408]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a65      	ldr	r2, [pc, #404]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 80020fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7fe ffc4 	bl	8001098 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002114:	f7fe ffc0 	bl	8001098 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e207      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	4b5b      	ldr	r3, [pc, #364]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0xc0>
 8002132:	e014      	b.n	800215e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7fe ffb0 	bl	8001098 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800213c:	f7fe ffac 	bl	8001098 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e1f3      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	4b51      	ldr	r3, [pc, #324]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0xe8>
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d063      	beq.n	8002232 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800216a:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800217e:	2b08      	cmp	r3, #8
 8002180:	d11c      	bne.n	80021bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002182:	4b44      	ldr	r3, [pc, #272]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d116      	bne.n	80021bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_RCC_OscConfig+0x152>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e1c7      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a6:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4937      	ldr	r1, [pc, #220]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	e03a      	b.n	8002232 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d020      	beq.n	8002206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c4:	4b34      	ldr	r3, [pc, #208]	; (8002298 <HAL_RCC_OscConfig+0x244>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ca:	f7fe ff65 	bl	8001098 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d2:	f7fe ff61 	bl	8001098 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e1a8      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e4:	4b2b      	ldr	r3, [pc, #172]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	4b28      	ldr	r3, [pc, #160]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4925      	ldr	r1, [pc, #148]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 8002200:	4313      	orrs	r3, r2
 8002202:	600b      	str	r3, [r1, #0]
 8002204:	e015      	b.n	8002232 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_RCC_OscConfig+0x244>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe ff44 	bl	8001098 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002214:	f7fe ff40 	bl	8001098 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e187      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d036      	beq.n	80022ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d016      	beq.n	8002274 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_RCC_OscConfig+0x248>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7fe ff24 	bl	8001098 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002254:	f7fe ff20 	bl	8001098 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e167      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_OscConfig+0x240>)
 8002268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x200>
 8002272:	e01b      	b.n	80022ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_RCC_OscConfig+0x248>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227a:	f7fe ff0d 	bl	8001098 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	e00e      	b.n	80022a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002282:	f7fe ff09 	bl	8001098 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d907      	bls.n	80022a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e150      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
 8002294:	40023800 	.word	0x40023800
 8002298:	42470000 	.word	0x42470000
 800229c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a0:	4b88      	ldr	r3, [pc, #544]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 80022a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1ea      	bne.n	8002282 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8097 	beq.w	80023e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022be:	4b81      	ldr	r3, [pc, #516]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10f      	bne.n	80022ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	4b7d      	ldr	r3, [pc, #500]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a7c      	ldr	r2, [pc, #496]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b7a      	ldr	r3, [pc, #488]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e6:	2301      	movs	r3, #1
 80022e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b77      	ldr	r3, [pc, #476]	; (80024c8 <HAL_RCC_OscConfig+0x474>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d118      	bne.n	8002328 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f6:	4b74      	ldr	r3, [pc, #464]	; (80024c8 <HAL_RCC_OscConfig+0x474>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a73      	ldr	r2, [pc, #460]	; (80024c8 <HAL_RCC_OscConfig+0x474>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7fe fec9 	bl	8001098 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7fe fec5 	bl	8001098 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e10c      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	4b6a      	ldr	r3, [pc, #424]	; (80024c8 <HAL_RCC_OscConfig+0x474>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d106      	bne.n	800233e <HAL_RCC_OscConfig+0x2ea>
 8002330:	4b64      	ldr	r3, [pc, #400]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002334:	4a63      	ldr	r2, [pc, #396]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6713      	str	r3, [r2, #112]	; 0x70
 800233c:	e01c      	b.n	8002378 <HAL_RCC_OscConfig+0x324>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b05      	cmp	r3, #5
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x30c>
 8002346:	4b5f      	ldr	r3, [pc, #380]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	4a5e      	ldr	r2, [pc, #376]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	6713      	str	r3, [r2, #112]	; 0x70
 8002352:	4b5c      	ldr	r3, [pc, #368]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	4a5b      	ldr	r2, [pc, #364]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6713      	str	r3, [r2, #112]	; 0x70
 800235e:	e00b      	b.n	8002378 <HAL_RCC_OscConfig+0x324>
 8002360:	4b58      	ldr	r3, [pc, #352]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	4a57      	ldr	r2, [pc, #348]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	6713      	str	r3, [r2, #112]	; 0x70
 800236c:	4b55      	ldr	r3, [pc, #340]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	4a54      	ldr	r2, [pc, #336]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002372:	f023 0304 	bic.w	r3, r3, #4
 8002376:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d015      	beq.n	80023ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002380:	f7fe fe8a 	bl	8001098 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002386:	e00a      	b.n	800239e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002388:	f7fe fe86 	bl	8001098 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e0cb      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239e:	4b49      	ldr	r3, [pc, #292]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0ee      	beq.n	8002388 <HAL_RCC_OscConfig+0x334>
 80023aa:	e014      	b.n	80023d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7fe fe74 	bl	8001098 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b4:	f7fe fe70 	bl	8001098 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e0b5      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ca:	4b3e      	ldr	r3, [pc, #248]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1ee      	bne.n	80023b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d105      	bne.n	80023e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023dc:	4b39      	ldr	r3, [pc, #228]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	4a38      	ldr	r2, [pc, #224]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 80023e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80a1 	beq.w	8002534 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023f2:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d05c      	beq.n	80024b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d141      	bne.n	800248a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002406:	4b31      	ldr	r3, [pc, #196]	; (80024cc <HAL_RCC_OscConfig+0x478>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7fe fe44 	bl	8001098 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002414:	f7fe fe40 	bl	8001098 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e087      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002426:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69da      	ldr	r2, [r3, #28]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	019b      	lsls	r3, r3, #6
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	085b      	lsrs	r3, r3, #1
 800244a:	3b01      	subs	r3, #1
 800244c:	041b      	lsls	r3, r3, #16
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	061b      	lsls	r3, r3, #24
 8002456:	491b      	ldr	r1, [pc, #108]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245c:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_RCC_OscConfig+0x478>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002462:	f7fe fe19 	bl	8001098 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246a:	f7fe fe15 	bl	8001098 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e05c      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x416>
 8002488:	e054      	b.n	8002534 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <HAL_RCC_OscConfig+0x478>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7fe fe02 	bl	8001098 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002498:	f7fe fdfe 	bl	8001098 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e045      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_RCC_OscConfig+0x470>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x444>
 80024b6:	e03d      	b.n	8002534 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d107      	bne.n	80024d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e038      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40007000 	.word	0x40007000
 80024cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_RCC_OscConfig+0x4ec>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d028      	beq.n	8002530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d121      	bne.n	8002530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d11a      	bne.n	8002530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002500:	4013      	ands	r3, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002506:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002508:	4293      	cmp	r3, r2
 800250a:	d111      	bne.n	8002530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	085b      	lsrs	r3, r3, #1
 8002518:	3b01      	subs	r3, #1
 800251a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d107      	bne.n	8002530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800

08002544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0cc      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002558:	4b68      	ldr	r3, [pc, #416]	; (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d90c      	bls.n	8002580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b65      	ldr	r3, [pc, #404]	; (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256e:	4b63      	ldr	r3, [pc, #396]	; (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0b8      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002598:	4b59      	ldr	r3, [pc, #356]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4a58      	ldr	r2, [pc, #352]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b0:	4b53      	ldr	r3, [pc, #332]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a52      	ldr	r2, [pc, #328]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025bc:	4b50      	ldr	r3, [pc, #320]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	494d      	ldr	r1, [pc, #308]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d044      	beq.n	8002664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b47      	ldr	r3, [pc, #284]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d119      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e07f      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d003      	beq.n	8002602 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e06f      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	4b3b      	ldr	r3, [pc, #236]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e067      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002622:	4b37      	ldr	r3, [pc, #220]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4934      	ldr	r1, [pc, #208]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002634:	f7fe fd30 	bl	8001098 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	e00a      	b.n	8002652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7fe fd2c 	bl	8001098 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e04f      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 020c 	and.w	r2, r3, #12
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d1eb      	bne.n	800263c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002664:	4b25      	ldr	r3, [pc, #148]	; (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d20c      	bcs.n	800268c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b20      	ldr	r3, [pc, #128]	; (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e032      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4916      	ldr	r1, [pc, #88]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	490e      	ldr	r1, [pc, #56]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ca:	f000 f821 	bl	8002710 <HAL_RCC_GetSysClockFreq>
 80026ce:	4602      	mov	r2, r0
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	490a      	ldr	r1, [pc, #40]	; (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	5ccb      	ldrb	r3, [r1, r3]
 80026de:	fa22 f303 	lsr.w	r3, r2, r3
 80026e2:	4a09      	ldr	r2, [pc, #36]	; (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fc90 	bl	8001010 <HAL_InitTick>

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40023c00 	.word	0x40023c00
 8002700:	40023800 	.word	0x40023800
 8002704:	08004b74 	.word	0x08004b74
 8002708:	20000000 	.word	0x20000000
 800270c:	20000004 	.word	0x20000004

08002710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002714:	b094      	sub	sp, #80	; 0x50
 8002716:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	647b      	str	r3, [r7, #68]	; 0x44
 800271c:	2300      	movs	r3, #0
 800271e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002720:	2300      	movs	r3, #0
 8002722:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002728:	4b79      	ldr	r3, [pc, #484]	; (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b08      	cmp	r3, #8
 8002732:	d00d      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x40>
 8002734:	2b08      	cmp	r3, #8
 8002736:	f200 80e1 	bhi.w	80028fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x34>
 800273e:	2b04      	cmp	r3, #4
 8002740:	d003      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x3a>
 8002742:	e0db      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002744:	4b73      	ldr	r3, [pc, #460]	; (8002914 <HAL_RCC_GetSysClockFreq+0x204>)
 8002746:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002748:	e0db      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800274a:	4b73      	ldr	r3, [pc, #460]	; (8002918 <HAL_RCC_GetSysClockFreq+0x208>)
 800274c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800274e:	e0d8      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002750:	4b6f      	ldr	r3, [pc, #444]	; (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002758:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800275a:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d063      	beq.n	800282e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002766:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	099b      	lsrs	r3, r3, #6
 800276c:	2200      	movs	r2, #0
 800276e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002770:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002778:	633b      	str	r3, [r7, #48]	; 0x30
 800277a:	2300      	movs	r3, #0
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
 800277e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002782:	4622      	mov	r2, r4
 8002784:	462b      	mov	r3, r5
 8002786:	f04f 0000 	mov.w	r0, #0
 800278a:	f04f 0100 	mov.w	r1, #0
 800278e:	0159      	lsls	r1, r3, #5
 8002790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002794:	0150      	lsls	r0, r2, #5
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4621      	mov	r1, r4
 800279c:	1a51      	subs	r1, r2, r1
 800279e:	6139      	str	r1, [r7, #16]
 80027a0:	4629      	mov	r1, r5
 80027a2:	eb63 0301 	sbc.w	r3, r3, r1
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027b4:	4659      	mov	r1, fp
 80027b6:	018b      	lsls	r3, r1, #6
 80027b8:	4651      	mov	r1, sl
 80027ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027be:	4651      	mov	r1, sl
 80027c0:	018a      	lsls	r2, r1, #6
 80027c2:	4651      	mov	r1, sl
 80027c4:	ebb2 0801 	subs.w	r8, r2, r1
 80027c8:	4659      	mov	r1, fp
 80027ca:	eb63 0901 	sbc.w	r9, r3, r1
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027e2:	4690      	mov	r8, r2
 80027e4:	4699      	mov	r9, r3
 80027e6:	4623      	mov	r3, r4
 80027e8:	eb18 0303 	adds.w	r3, r8, r3
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	462b      	mov	r3, r5
 80027f0:	eb49 0303 	adc.w	r3, r9, r3
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002802:	4629      	mov	r1, r5
 8002804:	024b      	lsls	r3, r1, #9
 8002806:	4621      	mov	r1, r4
 8002808:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800280c:	4621      	mov	r1, r4
 800280e:	024a      	lsls	r2, r1, #9
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002816:	2200      	movs	r2, #0
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28
 800281a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800281c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002820:	f7fd fce4 	bl	80001ec <__aeabi_uldivmod>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4613      	mov	r3, r2
 800282a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800282c:	e058      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282e:	4b38      	ldr	r3, [pc, #224]	; (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	099b      	lsrs	r3, r3, #6
 8002834:	2200      	movs	r2, #0
 8002836:	4618      	mov	r0, r3
 8002838:	4611      	mov	r1, r2
 800283a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800283e:	623b      	str	r3, [r7, #32]
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
 8002844:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002848:	4642      	mov	r2, r8
 800284a:	464b      	mov	r3, r9
 800284c:	f04f 0000 	mov.w	r0, #0
 8002850:	f04f 0100 	mov.w	r1, #0
 8002854:	0159      	lsls	r1, r3, #5
 8002856:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800285a:	0150      	lsls	r0, r2, #5
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4641      	mov	r1, r8
 8002862:	ebb2 0a01 	subs.w	sl, r2, r1
 8002866:	4649      	mov	r1, r9
 8002868:	eb63 0b01 	sbc.w	fp, r3, r1
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002878:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800287c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002880:	ebb2 040a 	subs.w	r4, r2, sl
 8002884:	eb63 050b 	sbc.w	r5, r3, fp
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	00eb      	lsls	r3, r5, #3
 8002892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002896:	00e2      	lsls	r2, r4, #3
 8002898:	4614      	mov	r4, r2
 800289a:	461d      	mov	r5, r3
 800289c:	4643      	mov	r3, r8
 800289e:	18e3      	adds	r3, r4, r3
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	464b      	mov	r3, r9
 80028a4:	eb45 0303 	adc.w	r3, r5, r3
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028b6:	4629      	mov	r1, r5
 80028b8:	028b      	lsls	r3, r1, #10
 80028ba:	4621      	mov	r1, r4
 80028bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028c0:	4621      	mov	r1, r4
 80028c2:	028a      	lsls	r2, r1, #10
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ca:	2200      	movs	r2, #0
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	61fa      	str	r2, [r7, #28]
 80028d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d4:	f7fd fc8a 	bl	80001ec <__aeabi_uldivmod>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4613      	mov	r3, r2
 80028de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	0c1b      	lsrs	r3, r3, #16
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	3301      	adds	r3, #1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028fa:	e002      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_RCC_GetSysClockFreq+0x204>)
 80028fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002904:	4618      	mov	r0, r3
 8002906:	3750      	adds	r7, #80	; 0x50
 8002908:	46bd      	mov	sp, r7
 800290a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800
 8002914:	00f42400 	.word	0x00f42400
 8002918:	007a1200 	.word	0x007a1200

0800291c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_RCC_GetHCLKFreq+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	20000000 	.word	0x20000000

08002934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002938:	f7ff fff0 	bl	800291c <HAL_RCC_GetHCLKFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	0a9b      	lsrs	r3, r3, #10
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4903      	ldr	r1, [pc, #12]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002950:	4618      	mov	r0, r3
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40023800 	.word	0x40023800
 8002958:	08004b84 	.word	0x08004b84

0800295c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002960:	f7ff ffdc 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	0b5b      	lsrs	r3, r3, #13
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	4903      	ldr	r1, [pc, #12]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002978:	4618      	mov	r0, r3
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40023800 	.word	0x40023800
 8002980:	08004b84 	.word	0x08004b84

08002984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e03f      	b.n	8002a16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe f8ea 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2224      	movs	r2, #36	; 0x24
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fe13 	bl	80035f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695a      	ldr	r2, [r3, #20]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b08a      	sub	sp, #40	; 0x28
 8002a22:	af02      	add	r7, sp, #8
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d17c      	bne.n	8002b38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <HAL_UART_Transmit+0x2c>
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e075      	b.n	8002b3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_UART_Transmit+0x3e>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e06e      	b.n	8002b3a <HAL_UART_Transmit+0x11c>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2221      	movs	r2, #33	; 0x21
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a72:	f7fe fb11 	bl	8001098 <HAL_GetTick>
 8002a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	88fa      	ldrh	r2, [r7, #6]
 8002a7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	88fa      	ldrh	r2, [r7, #6]
 8002a82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8c:	d108      	bne.n	8002aa0 <HAL_UART_Transmit+0x82>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d104      	bne.n	8002aa0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	e003      	b.n	8002aa8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ab0:	e02a      	b.n	8002b08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2180      	movs	r1, #128	; 0x80
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 fb91 	bl	80031e4 <UART_WaitOnFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e036      	b.n	8002b3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10b      	bne.n	8002aea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ae0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	61bb      	str	r3, [r7, #24]
 8002ae8:	e007      	b.n	8002afa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	3301      	adds	r3, #1
 8002af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1cf      	bne.n	8002ab2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2140      	movs	r1, #64	; 0x40
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 fb61 	bl	80031e4 <UART_WaitOnFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e006      	b.n	8002b3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	e000      	b.n	8002b3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b38:	2302      	movs	r3, #2
  }
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b08a      	sub	sp, #40	; 0x28
 8002b46:	af02      	add	r7, sp, #8
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	f040 808c 	bne.w	8002c7c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_UART_Receive+0x2e>
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e084      	b.n	8002c7e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_UART_Receive+0x40>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e07d      	b.n	8002c7e <HAL_UART_Receive+0x13c>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2222      	movs	r2, #34	; 0x22
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b9e:	f7fe fa7b 	bl	8001098 <HAL_GetTick>
 8002ba2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	88fa      	ldrh	r2, [r7, #6]
 8002ba8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	88fa      	ldrh	r2, [r7, #6]
 8002bae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb8:	d108      	bne.n	8002bcc <HAL_UART_Receive+0x8a>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d104      	bne.n	8002bcc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	e003      	b.n	8002bd4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002bdc:	e043      	b.n	8002c66 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2200      	movs	r2, #0
 8002be6:	2120      	movs	r1, #32
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 fafb 	bl	80031e4 <UART_WaitOnFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e042      	b.n	8002c7e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10c      	bne.n	8002c18 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	3302      	adds	r3, #2
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	e01f      	b.n	8002c58 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c20:	d007      	beq.n	8002c32 <HAL_UART_Receive+0xf0>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <HAL_UART_Receive+0xfe>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e008      	b.n	8002c52 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3301      	adds	r3, #1
 8002c56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1b6      	bne.n	8002bde <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e000      	b.n	8002c7e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b0ba      	sub	sp, #232	; 0xe8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002cc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10f      	bne.n	8002cee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HAL_UART_IRQHandler+0x66>
 8002cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fbc9 	bl	800347e <UART_Receive_IT>
      return;
 8002cec:	e256      	b.n	800319c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 80de 	beq.w	8002eb4 <HAL_UART_IRQHandler+0x22c>
 8002cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d106      	bne.n	8002d12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80d1 	beq.w	8002eb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_UART_IRQHandler+0xae>
 8002d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_UART_IRQHandler+0xd2>
 8002d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_UART_IRQHandler+0xf6>
 8002d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f043 0204 	orr.w	r2, r3, #4
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d011      	beq.n	8002dae <HAL_UART_IRQHandler+0x126>
 8002d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f043 0208 	orr.w	r2, r3, #8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 81ed 	beq.w	8003192 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x14e>
 8002dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 fb54 	bl	800347e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de0:	2b40      	cmp	r3, #64	; 0x40
 8002de2:	bf0c      	ite	eq
 8002de4:	2301      	moveq	r3, #1
 8002de6:	2300      	movne	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <HAL_UART_IRQHandler+0x17a>
 8002dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d04f      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fa5c 	bl	80032c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	d141      	bne.n	8002e9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3314      	adds	r3, #20
 8002e1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e24:	e853 3f00 	ldrex	r3, [r3]
 8002e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3314      	adds	r3, #20
 8002e3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e52:	e841 2300 	strex	r3, r2, [r1]
 8002e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1d9      	bne.n	8002e16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d013      	beq.n	8002e92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	4a7d      	ldr	r2, [pc, #500]	; (8003064 <HAL_UART_IRQHandler+0x3dc>)
 8002e70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe fabf 	bl	80013fa <HAL_DMA_Abort_IT>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d016      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e90:	e00e      	b.n	8002eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f990 	bl	80031b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e98:	e00a      	b.n	8002eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f98c 	bl	80031b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea0:	e006      	b.n	8002eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f988 	bl	80031b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002eae:	e170      	b.n	8003192 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb0:	bf00      	nop
    return;
 8002eb2:	e16e      	b.n	8003192 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	f040 814a 	bne.w	8003152 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8143 	beq.w	8003152 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 813c 	beq.w	8003152 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efa:	2b40      	cmp	r3, #64	; 0x40
 8002efc:	f040 80b4 	bne.w	8003068 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 8140 	beq.w	8003196 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	f080 8139 	bcs.w	8003196 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f36:	f000 8088 	beq.w	800304a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330c      	adds	r3, #12
 8002f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f48:	e853 3f00 	ldrex	r3, [r3]
 8002f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f76:	e841 2300 	strex	r3, r2, [r1]
 8002f7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1d9      	bne.n	8002f3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3314      	adds	r3, #20
 8002f8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3314      	adds	r3, #20
 8002fa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002faa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fb6:	e841 2300 	strex	r3, r2, [r1]
 8002fba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1e1      	bne.n	8002f86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3314      	adds	r3, #20
 8002fc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fcc:	e853 3f00 	ldrex	r3, [r3]
 8002fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3314      	adds	r3, #20
 8002fe2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fe6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fe8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fee:	e841 2300 	strex	r3, r2, [r1]
 8002ff2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e3      	bne.n	8002fc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	330c      	adds	r3, #12
 800300e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003012:	e853 3f00 	ldrex	r3, [r3]
 8003016:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800301a:	f023 0310 	bic.w	r3, r3, #16
 800301e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	330c      	adds	r3, #12
 8003028:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800302c:	65ba      	str	r2, [r7, #88]	; 0x58
 800302e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003030:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003032:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003034:	e841 2300 	strex	r3, r2, [r1]
 8003038:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800303a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e3      	bne.n	8003008 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe f968 	bl	800131a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003052:	b29b      	uxth	r3, r3
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	b29b      	uxth	r3, r3
 8003058:	4619      	mov	r1, r3
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f8b6 	bl	80031cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003060:	e099      	b.n	8003196 <HAL_UART_IRQHandler+0x50e>
 8003062:	bf00      	nop
 8003064:	08003387 	.word	0x08003387
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003070:	b29b      	uxth	r3, r3
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 808b 	beq.w	800319a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8086 	beq.w	800319a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	330c      	adds	r3, #12
 8003094:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	e853 3f00 	ldrex	r3, [r3]
 800309c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800309e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80030b2:	647a      	str	r2, [r7, #68]	; 0x44
 80030b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030ba:	e841 2300 	strex	r3, r2, [r1]
 80030be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1e3      	bne.n	800308e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3314      	adds	r3, #20
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	623b      	str	r3, [r7, #32]
   return(result);
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3314      	adds	r3, #20
 80030e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030ea:	633a      	str	r2, [r7, #48]	; 0x30
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e3      	bne.n	80030c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	330c      	adds	r3, #12
 8003112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	e853 3f00 	ldrex	r3, [r3]
 800311a:	60fb      	str	r3, [r7, #12]
   return(result);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0310 	bic.w	r3, r3, #16
 8003122:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003130:	61fa      	str	r2, [r7, #28]
 8003132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003134:	69b9      	ldr	r1, [r7, #24]
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	e841 2300 	strex	r3, r2, [r1]
 800313c:	617b      	str	r3, [r7, #20]
   return(result);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e3      	bne.n	800310c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003144:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003148:	4619      	mov	r1, r3
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f83e 	bl	80031cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003150:	e023      	b.n	800319a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <HAL_UART_IRQHandler+0x4ea>
 800315e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f91f 	bl	80033ae <UART_Transmit_IT>
    return;
 8003170:	e014      	b.n	800319c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00e      	beq.n	800319c <HAL_UART_IRQHandler+0x514>
 800317e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f95f 	bl	800344e <UART_EndTransmit_IT>
    return;
 8003190:	e004      	b.n	800319c <HAL_UART_IRQHandler+0x514>
    return;
 8003192:	bf00      	nop
 8003194:	e002      	b.n	800319c <HAL_UART_IRQHandler+0x514>
      return;
 8003196:	bf00      	nop
 8003198:	e000      	b.n	800319c <HAL_UART_IRQHandler+0x514>
      return;
 800319a:	bf00      	nop
  }
}
 800319c:	37e8      	adds	r7, #232	; 0xe8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop

080031a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b090      	sub	sp, #64	; 0x40
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	4613      	mov	r3, r2
 80031f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f4:	e050      	b.n	8003298 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d04c      	beq.n	8003298 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <UART_WaitOnFlagUntilTimeout+0x30>
 8003204:	f7fd ff48 	bl	8001098 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003210:	429a      	cmp	r2, r3
 8003212:	d241      	bcs.n	8003298 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	e853 3f00 	ldrex	r3, [r3]
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	330c      	adds	r3, #12
 8003232:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003234:	637a      	str	r2, [r7, #52]	; 0x34
 8003236:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800323a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800323c:	e841 2300 	strex	r3, r2, [r1]
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e5      	bne.n	8003214 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3314      	adds	r3, #20
 800324e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	e853 3f00 	ldrex	r3, [r3]
 8003256:	613b      	str	r3, [r7, #16]
   return(result);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3314      	adds	r3, #20
 8003266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003268:	623a      	str	r2, [r7, #32]
 800326a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326c:	69f9      	ldr	r1, [r7, #28]
 800326e:	6a3a      	ldr	r2, [r7, #32]
 8003270:	e841 2300 	strex	r3, r2, [r1]
 8003274:	61bb      	str	r3, [r7, #24]
   return(result);
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1e5      	bne.n	8003248 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e00f      	b.n	80032b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	4013      	ands	r3, r2
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	461a      	mov	r2, r3
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d09f      	beq.n	80031f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3740      	adds	r7, #64	; 0x40
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b095      	sub	sp, #84	; 0x54
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	330c      	adds	r3, #12
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d2:	e853 3f00 	ldrex	r3, [r3]
 80032d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032e8:	643a      	str	r2, [r7, #64]	; 0x40
 80032ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032f0:	e841 2300 	strex	r3, r2, [r1]
 80032f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1e5      	bne.n	80032c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3314      	adds	r3, #20
 8003302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	e853 3f00 	ldrex	r3, [r3]
 800330a:	61fb      	str	r3, [r7, #28]
   return(result);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f023 0301 	bic.w	r3, r3, #1
 8003312:	64bb      	str	r3, [r7, #72]	; 0x48
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3314      	adds	r3, #20
 800331a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800331c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003324:	e841 2300 	strex	r3, r2, [r1]
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e5      	bne.n	80032fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	2b01      	cmp	r3, #1
 8003336:	d119      	bne.n	800336c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	330c      	adds	r3, #12
 800333e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	e853 3f00 	ldrex	r3, [r3]
 8003346:	60bb      	str	r3, [r7, #8]
   return(result);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f023 0310 	bic.w	r3, r3, #16
 800334e:	647b      	str	r3, [r7, #68]	; 0x44
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003358:	61ba      	str	r2, [r7, #24]
 800335a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	6979      	ldr	r1, [r7, #20]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	613b      	str	r3, [r7, #16]
   return(result);
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e5      	bne.n	8003338 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
}
 800337a:	bf00      	nop
 800337c:	3754      	adds	r7, #84	; 0x54
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f7ff ff09 	bl	80031b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033a6:	bf00      	nop
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b21      	cmp	r3, #33	; 0x21
 80033c0:	d13e      	bne.n	8003440 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ca:	d114      	bne.n	80033f6 <UART_Transmit_IT+0x48>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d110      	bne.n	80033f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	1c9a      	adds	r2, r3, #2
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	621a      	str	r2, [r3, #32]
 80033f4:	e008      	b.n	8003408 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	1c59      	adds	r1, r3, #1
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6211      	str	r1, [r2, #32]
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29b      	uxth	r3, r3
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4619      	mov	r1, r3
 8003416:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10f      	bne.n	800343c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800342a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800343a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	e000      	b.n	8003442 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003440:	2302      	movs	r3, #2
  }
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003464:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff fe98 	bl	80031a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b08c      	sub	sp, #48	; 0x30
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b22      	cmp	r3, #34	; 0x22
 8003490:	f040 80ab 	bne.w	80035ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349c:	d117      	bne.n	80034ce <UART_Receive_IT+0x50>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d113      	bne.n	80034ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034bc:	b29a      	uxth	r2, r3
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	1c9a      	adds	r2, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28
 80034cc:	e026      	b.n	800351c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e0:	d007      	beq.n	80034f2 <UART_Receive_IT+0x74>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <UART_Receive_IT+0x82>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e008      	b.n	8003512 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800350c:	b2da      	uxtb	r2, r3
 800350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003510:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29b      	uxth	r3, r3
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4619      	mov	r1, r3
 800352a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800352c:	2b00      	cmp	r3, #0
 800352e:	d15a      	bne.n	80035e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0220 	bic.w	r2, r2, #32
 800353e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800354e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	2b01      	cmp	r3, #1
 800356e:	d135      	bne.n	80035dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	330c      	adds	r3, #12
 800357c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	e853 3f00 	ldrex	r3, [r3]
 8003584:	613b      	str	r3, [r7, #16]
   return(result);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f023 0310 	bic.w	r3, r3, #16
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	330c      	adds	r3, #12
 8003594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003596:	623a      	str	r2, [r7, #32]
 8003598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359a:	69f9      	ldr	r1, [r7, #28]
 800359c:	6a3a      	ldr	r2, [r7, #32]
 800359e:	e841 2300 	strex	r3, r2, [r1]
 80035a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e5      	bne.n	8003576 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d10a      	bne.n	80035ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035d2:	4619      	mov	r1, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff fdf9 	bl	80031cc <HAL_UARTEx_RxEventCallback>
 80035da:	e002      	b.n	80035e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7fc ff99 	bl	8000514 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	e002      	b.n	80035ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e000      	b.n	80035ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80035ea:	2302      	movs	r3, #2
  }
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3730      	adds	r7, #48	; 0x30
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f8:	b0c0      	sub	sp, #256	; 0x100
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800360c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003610:	68d9      	ldr	r1, [r3, #12]
 8003612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	ea40 0301 	orr.w	r3, r0, r1
 800361c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800361e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	431a      	orrs	r2, r3
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	431a      	orrs	r2, r3
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800364c:	f021 010c 	bic.w	r1, r1, #12
 8003650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800365a:	430b      	orrs	r3, r1
 800365c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800366a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366e:	6999      	ldr	r1, [r3, #24]
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	ea40 0301 	orr.w	r3, r0, r1
 800367a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	4b8f      	ldr	r3, [pc, #572]	; (80038c0 <UART_SetConfig+0x2cc>)
 8003684:	429a      	cmp	r2, r3
 8003686:	d005      	beq.n	8003694 <UART_SetConfig+0xa0>
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4b8d      	ldr	r3, [pc, #564]	; (80038c4 <UART_SetConfig+0x2d0>)
 8003690:	429a      	cmp	r2, r3
 8003692:	d104      	bne.n	800369e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003694:	f7ff f962 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 8003698:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800369c:	e003      	b.n	80036a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800369e:	f7ff f949 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 80036a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b0:	f040 810c 	bne.w	80038cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b8:	2200      	movs	r2, #0
 80036ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80036c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80036c6:	4622      	mov	r2, r4
 80036c8:	462b      	mov	r3, r5
 80036ca:	1891      	adds	r1, r2, r2
 80036cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80036ce:	415b      	adcs	r3, r3
 80036d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036d6:	4621      	mov	r1, r4
 80036d8:	eb12 0801 	adds.w	r8, r2, r1
 80036dc:	4629      	mov	r1, r5
 80036de:	eb43 0901 	adc.w	r9, r3, r1
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036f6:	4690      	mov	r8, r2
 80036f8:	4699      	mov	r9, r3
 80036fa:	4623      	mov	r3, r4
 80036fc:	eb18 0303 	adds.w	r3, r8, r3
 8003700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003704:	462b      	mov	r3, r5
 8003706:	eb49 0303 	adc.w	r3, r9, r3
 800370a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800370e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800371a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800371e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003722:	460b      	mov	r3, r1
 8003724:	18db      	adds	r3, r3, r3
 8003726:	653b      	str	r3, [r7, #80]	; 0x50
 8003728:	4613      	mov	r3, r2
 800372a:	eb42 0303 	adc.w	r3, r2, r3
 800372e:	657b      	str	r3, [r7, #84]	; 0x54
 8003730:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003734:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003738:	f7fc fd58 	bl	80001ec <__aeabi_uldivmod>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4b61      	ldr	r3, [pc, #388]	; (80038c8 <UART_SetConfig+0x2d4>)
 8003742:	fba3 2302 	umull	r2, r3, r3, r2
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	011c      	lsls	r4, r3, #4
 800374a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800374e:	2200      	movs	r2, #0
 8003750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003754:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003758:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800375c:	4642      	mov	r2, r8
 800375e:	464b      	mov	r3, r9
 8003760:	1891      	adds	r1, r2, r2
 8003762:	64b9      	str	r1, [r7, #72]	; 0x48
 8003764:	415b      	adcs	r3, r3
 8003766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003768:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800376c:	4641      	mov	r1, r8
 800376e:	eb12 0a01 	adds.w	sl, r2, r1
 8003772:	4649      	mov	r1, r9
 8003774:	eb43 0b01 	adc.w	fp, r3, r1
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003784:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003788:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800378c:	4692      	mov	sl, r2
 800378e:	469b      	mov	fp, r3
 8003790:	4643      	mov	r3, r8
 8003792:	eb1a 0303 	adds.w	r3, sl, r3
 8003796:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800379a:	464b      	mov	r3, r9
 800379c:	eb4b 0303 	adc.w	r3, fp, r3
 80037a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037b8:	460b      	mov	r3, r1
 80037ba:	18db      	adds	r3, r3, r3
 80037bc:	643b      	str	r3, [r7, #64]	; 0x40
 80037be:	4613      	mov	r3, r2
 80037c0:	eb42 0303 	adc.w	r3, r2, r3
 80037c4:	647b      	str	r3, [r7, #68]	; 0x44
 80037c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037ce:	f7fc fd0d 	bl	80001ec <__aeabi_uldivmod>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4611      	mov	r1, r2
 80037d8:	4b3b      	ldr	r3, [pc, #236]	; (80038c8 <UART_SetConfig+0x2d4>)
 80037da:	fba3 2301 	umull	r2, r3, r3, r1
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	2264      	movs	r2, #100	; 0x64
 80037e2:	fb02 f303 	mul.w	r3, r2, r3
 80037e6:	1acb      	subs	r3, r1, r3
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037ee:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <UART_SetConfig+0x2d4>)
 80037f0:	fba3 2302 	umull	r2, r3, r3, r2
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037fc:	441c      	add	r4, r3
 80037fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003802:	2200      	movs	r2, #0
 8003804:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003808:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800380c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003810:	4642      	mov	r2, r8
 8003812:	464b      	mov	r3, r9
 8003814:	1891      	adds	r1, r2, r2
 8003816:	63b9      	str	r1, [r7, #56]	; 0x38
 8003818:	415b      	adcs	r3, r3
 800381a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800381c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003820:	4641      	mov	r1, r8
 8003822:	1851      	adds	r1, r2, r1
 8003824:	6339      	str	r1, [r7, #48]	; 0x30
 8003826:	4649      	mov	r1, r9
 8003828:	414b      	adcs	r3, r1
 800382a:	637b      	str	r3, [r7, #52]	; 0x34
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003838:	4659      	mov	r1, fp
 800383a:	00cb      	lsls	r3, r1, #3
 800383c:	4651      	mov	r1, sl
 800383e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003842:	4651      	mov	r1, sl
 8003844:	00ca      	lsls	r2, r1, #3
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	4603      	mov	r3, r0
 800384c:	4642      	mov	r2, r8
 800384e:	189b      	adds	r3, r3, r2
 8003850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003854:	464b      	mov	r3, r9
 8003856:	460a      	mov	r2, r1
 8003858:	eb42 0303 	adc.w	r3, r2, r3
 800385c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800386c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003870:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003874:	460b      	mov	r3, r1
 8003876:	18db      	adds	r3, r3, r3
 8003878:	62bb      	str	r3, [r7, #40]	; 0x28
 800387a:	4613      	mov	r3, r2
 800387c:	eb42 0303 	adc.w	r3, r2, r3
 8003880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003882:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003886:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800388a:	f7fc fcaf 	bl	80001ec <__aeabi_uldivmod>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <UART_SetConfig+0x2d4>)
 8003894:	fba3 1302 	umull	r1, r3, r3, r2
 8003898:	095b      	lsrs	r3, r3, #5
 800389a:	2164      	movs	r1, #100	; 0x64
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	3332      	adds	r3, #50	; 0x32
 80038a6:	4a08      	ldr	r2, [pc, #32]	; (80038c8 <UART_SetConfig+0x2d4>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	f003 0207 	and.w	r2, r3, #7
 80038b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4422      	add	r2, r4
 80038ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038bc:	e105      	b.n	8003aca <UART_SetConfig+0x4d6>
 80038be:	bf00      	nop
 80038c0:	40011000 	.word	0x40011000
 80038c4:	40011400 	.word	0x40011400
 80038c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d0:	2200      	movs	r2, #0
 80038d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80038da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80038de:	4642      	mov	r2, r8
 80038e0:	464b      	mov	r3, r9
 80038e2:	1891      	adds	r1, r2, r2
 80038e4:	6239      	str	r1, [r7, #32]
 80038e6:	415b      	adcs	r3, r3
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038ee:	4641      	mov	r1, r8
 80038f0:	1854      	adds	r4, r2, r1
 80038f2:	4649      	mov	r1, r9
 80038f4:	eb43 0501 	adc.w	r5, r3, r1
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	00eb      	lsls	r3, r5, #3
 8003902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003906:	00e2      	lsls	r2, r4, #3
 8003908:	4614      	mov	r4, r2
 800390a:	461d      	mov	r5, r3
 800390c:	4643      	mov	r3, r8
 800390e:	18e3      	adds	r3, r4, r3
 8003910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003914:	464b      	mov	r3, r9
 8003916:	eb45 0303 	adc.w	r3, r5, r3
 800391a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800391e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800392a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800393a:	4629      	mov	r1, r5
 800393c:	008b      	lsls	r3, r1, #2
 800393e:	4621      	mov	r1, r4
 8003940:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003944:	4621      	mov	r1, r4
 8003946:	008a      	lsls	r2, r1, #2
 8003948:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800394c:	f7fc fc4e 	bl	80001ec <__aeabi_uldivmod>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4b60      	ldr	r3, [pc, #384]	; (8003ad8 <UART_SetConfig+0x4e4>)
 8003956:	fba3 2302 	umull	r2, r3, r3, r2
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	011c      	lsls	r4, r3, #4
 800395e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003962:	2200      	movs	r2, #0
 8003964:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003968:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800396c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003970:	4642      	mov	r2, r8
 8003972:	464b      	mov	r3, r9
 8003974:	1891      	adds	r1, r2, r2
 8003976:	61b9      	str	r1, [r7, #24]
 8003978:	415b      	adcs	r3, r3
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003980:	4641      	mov	r1, r8
 8003982:	1851      	adds	r1, r2, r1
 8003984:	6139      	str	r1, [r7, #16]
 8003986:	4649      	mov	r1, r9
 8003988:	414b      	adcs	r3, r1
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003998:	4659      	mov	r1, fp
 800399a:	00cb      	lsls	r3, r1, #3
 800399c:	4651      	mov	r1, sl
 800399e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039a2:	4651      	mov	r1, sl
 80039a4:	00ca      	lsls	r2, r1, #3
 80039a6:	4610      	mov	r0, r2
 80039a8:	4619      	mov	r1, r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	4642      	mov	r2, r8
 80039ae:	189b      	adds	r3, r3, r2
 80039b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039b4:	464b      	mov	r3, r9
 80039b6:	460a      	mov	r2, r1
 80039b8:	eb42 0303 	adc.w	r3, r2, r3
 80039bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80039ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80039d8:	4649      	mov	r1, r9
 80039da:	008b      	lsls	r3, r1, #2
 80039dc:	4641      	mov	r1, r8
 80039de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039e2:	4641      	mov	r1, r8
 80039e4:	008a      	lsls	r2, r1, #2
 80039e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039ea:	f7fc fbff 	bl	80001ec <__aeabi_uldivmod>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <UART_SetConfig+0x4e4>)
 80039f4:	fba3 1302 	umull	r1, r3, r3, r2
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	2164      	movs	r1, #100	; 0x64
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	3332      	adds	r3, #50	; 0x32
 8003a06:	4a34      	ldr	r2, [pc, #208]	; (8003ad8 <UART_SetConfig+0x4e4>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a12:	441c      	add	r4, r3
 8003a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a18:	2200      	movs	r2, #0
 8003a1a:	673b      	str	r3, [r7, #112]	; 0x70
 8003a1c:	677a      	str	r2, [r7, #116]	; 0x74
 8003a1e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a22:	4642      	mov	r2, r8
 8003a24:	464b      	mov	r3, r9
 8003a26:	1891      	adds	r1, r2, r2
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	415b      	adcs	r3, r3
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a32:	4641      	mov	r1, r8
 8003a34:	1851      	adds	r1, r2, r1
 8003a36:	6039      	str	r1, [r7, #0]
 8003a38:	4649      	mov	r1, r9
 8003a3a:	414b      	adcs	r3, r1
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a4a:	4659      	mov	r1, fp
 8003a4c:	00cb      	lsls	r3, r1, #3
 8003a4e:	4651      	mov	r1, sl
 8003a50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a54:	4651      	mov	r1, sl
 8003a56:	00ca      	lsls	r2, r1, #3
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4642      	mov	r2, r8
 8003a60:	189b      	adds	r3, r3, r2
 8003a62:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a64:	464b      	mov	r3, r9
 8003a66:	460a      	mov	r2, r1
 8003a68:	eb42 0303 	adc.w	r3, r2, r3
 8003a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	663b      	str	r3, [r7, #96]	; 0x60
 8003a78:	667a      	str	r2, [r7, #100]	; 0x64
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a86:	4649      	mov	r1, r9
 8003a88:	008b      	lsls	r3, r1, #2
 8003a8a:	4641      	mov	r1, r8
 8003a8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a90:	4641      	mov	r1, r8
 8003a92:	008a      	lsls	r2, r1, #2
 8003a94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a98:	f7fc fba8 	bl	80001ec <__aeabi_uldivmod>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4b0d      	ldr	r3, [pc, #52]	; (8003ad8 <UART_SetConfig+0x4e4>)
 8003aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	2164      	movs	r1, #100	; 0x64
 8003aaa:	fb01 f303 	mul.w	r3, r1, r3
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	3332      	adds	r3, #50	; 0x32
 8003ab4:	4a08      	ldr	r2, [pc, #32]	; (8003ad8 <UART_SetConfig+0x4e4>)
 8003ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	f003 020f 	and.w	r2, r3, #15
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4422      	add	r2, r4
 8003ac8:	609a      	str	r2, [r3, #8]
}
 8003aca:	bf00      	nop
 8003acc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ad6:	bf00      	nop
 8003ad8:	51eb851f 	.word	0x51eb851f

08003adc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003adc:	b084      	sub	sp, #16
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	f107 001c 	add.w	r0, r7, #28
 8003aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d122      	bne.n	8003b3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d105      	bne.n	8003b2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 faa2 	bl	8004078 <USB_CoreReset>
 8003b34:	4603      	mov	r3, r0
 8003b36:	73fb      	strb	r3, [r7, #15]
 8003b38:	e01a      	b.n	8003b70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fa96 	bl	8004078 <USB_CoreReset>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	639a      	str	r2, [r3, #56]	; 0x38
 8003b62:	e005      	b.n	8003b70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d10b      	bne.n	8003b8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f043 0206 	orr.w	r2, r3, #6
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f043 0220 	orr.w	r2, r3, #32
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b9a:	b004      	add	sp, #16
 8003b9c:	4770      	bx	lr

08003b9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 0201 	bic.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d115      	bne.n	8003c0e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003bee:	2001      	movs	r0, #1
 8003bf0:	f7fd fa5e 	bl	80010b0 <HAL_Delay>
      ms++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fa2e 	bl	800405c <USB_GetMode>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d01e      	beq.n	8003c44 <USB_SetCurrentMode+0x84>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b31      	cmp	r3, #49	; 0x31
 8003c0a:	d9f0      	bls.n	8003bee <USB_SetCurrentMode+0x2e>
 8003c0c:	e01a      	b.n	8003c44 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d115      	bne.n	8003c40 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c20:	2001      	movs	r0, #1
 8003c22:	f7fd fa45 	bl	80010b0 <HAL_Delay>
      ms++;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fa15 	bl	800405c <USB_GetMode>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <USB_SetCurrentMode+0x84>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b31      	cmp	r3, #49	; 0x31
 8003c3c:	d9f0      	bls.n	8003c20 <USB_SetCurrentMode+0x60>
 8003c3e:	e001      	b.n	8003c44 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e005      	b.n	8003c50 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b32      	cmp	r3, #50	; 0x32
 8003c48:	d101      	bne.n	8003c4e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c58:	b084      	sub	sp, #16
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b086      	sub	sp, #24
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	e009      	b.n	8003c8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	3340      	adds	r3, #64	; 0x40
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	2200      	movs	r2, #0
 8003c84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b0e      	cmp	r3, #14
 8003c90:	d9f2      	bls.n	8003c78 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d11c      	bne.n	8003cd2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ca6:	f043 0302 	orr.w	r3, r3, #2
 8003caa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38
 8003cd0:	e00b      	b.n	8003cea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d04:	461a      	mov	r2, r3
 8003d06:	680b      	ldr	r3, [r1, #0]
 8003d08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d10c      	bne.n	8003d2a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d104      	bne.n	8003d20 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d16:	2100      	movs	r1, #0
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f965 	bl	8003fe8 <USB_SetDevSpeed>
 8003d1e:	e008      	b.n	8003d32 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d20:	2101      	movs	r1, #1
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f960 	bl	8003fe8 <USB_SetDevSpeed>
 8003d28:	e003      	b.n	8003d32 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d2a:	2103      	movs	r1, #3
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f95b 	bl	8003fe8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d32:	2110      	movs	r1, #16
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f8f3 	bl	8003f20 <USB_FlushTxFifo>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f91f 	bl	8003f88 <USB_FlushRxFifo>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d66:	461a      	mov	r2, r3
 8003d68:	2300      	movs	r3, #0
 8003d6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d72:	461a      	mov	r2, r3
 8003d74:	2300      	movs	r3, #0
 8003d76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	e043      	b.n	8003e06 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d94:	d118      	bne.n	8003dc8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da8:	461a      	mov	r2, r3
 8003daa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	e013      	b.n	8003dda <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e008      	b.n	8003dda <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de6:	461a      	mov	r2, r3
 8003de8:	2300      	movs	r3, #0
 8003dea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dfe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	3301      	adds	r3, #1
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d3b7      	bcc.n	8003d7e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	e043      	b.n	8003e9c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e2a:	d118      	bne.n	8003e5e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e013      	b.n	8003e70 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e54:	461a      	mov	r2, r3
 8003e56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	e008      	b.n	8003e70 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d3b7      	bcc.n	8003e14 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ec4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f043 0210 	orr.w	r2, r3, #16
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699a      	ldr	r2, [r3, #24]
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <USB_DevInit+0x2c4>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	f043 0208 	orr.w	r2, r3, #8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d107      	bne.n	8003f0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f04:	f043 0304 	orr.w	r3, r3, #4
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f18:	b004      	add	sp, #16
 8003f1a:	4770      	bx	lr
 8003f1c:	803c3800 	.word	0x803c3800

08003f20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3301      	adds	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <USB_FlushTxFifo+0x64>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e01b      	b.n	8003f78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	daf2      	bge.n	8003f2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	019b      	lsls	r3, r3, #6
 8003f50:	f043 0220 	orr.w	r2, r3, #32
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <USB_FlushTxFifo+0x64>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e006      	b.n	8003f78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d0f0      	beq.n	8003f58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	00030d40 	.word	0x00030d40

08003f88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3301      	adds	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a11      	ldr	r2, [pc, #68]	; (8003fe4 <USB_FlushRxFifo+0x5c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e018      	b.n	8003fd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	daf2      	bge.n	8003f94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <USB_FlushRxFifo+0x5c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e006      	b.n	8003fd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b10      	cmp	r3, #16
 8003fd4:	d0f0      	beq.n	8003fb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	00030d40 	.word	0x00030d40

08003fe8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	68f9      	ldr	r1, [r7, #12]
 8004004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004034:	f023 0303 	bic.w	r3, r3, #3
 8004038:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004048:	f043 0302 	orr.w	r3, r3, #2
 800404c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	f003 0301 	and.w	r3, r3, #1
}
 800406c:	4618      	mov	r0, r3
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3301      	adds	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4a13      	ldr	r2, [pc, #76]	; (80040dc <USB_CoreReset+0x64>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e01b      	b.n	80040ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	daf2      	bge.n	8004084 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f043 0201 	orr.w	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3301      	adds	r3, #1
 80040b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4a09      	ldr	r2, [pc, #36]	; (80040dc <USB_CoreReset+0x64>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e006      	b.n	80040ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d0f0      	beq.n	80040ae <USB_CoreReset+0x36>

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	00030d40 	.word	0x00030d40

080040e0 <__errno>:
 80040e0:	4b01      	ldr	r3, [pc, #4]	; (80040e8 <__errno+0x8>)
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	2000000c 	.word	0x2000000c

080040ec <__libc_init_array>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	4d0d      	ldr	r5, [pc, #52]	; (8004124 <__libc_init_array+0x38>)
 80040f0:	4c0d      	ldr	r4, [pc, #52]	; (8004128 <__libc_init_array+0x3c>)
 80040f2:	1b64      	subs	r4, r4, r5
 80040f4:	10a4      	asrs	r4, r4, #2
 80040f6:	2600      	movs	r6, #0
 80040f8:	42a6      	cmp	r6, r4
 80040fa:	d109      	bne.n	8004110 <__libc_init_array+0x24>
 80040fc:	4d0b      	ldr	r5, [pc, #44]	; (800412c <__libc_init_array+0x40>)
 80040fe:	4c0c      	ldr	r4, [pc, #48]	; (8004130 <__libc_init_array+0x44>)
 8004100:	f000 fd1e 	bl	8004b40 <_init>
 8004104:	1b64      	subs	r4, r4, r5
 8004106:	10a4      	asrs	r4, r4, #2
 8004108:	2600      	movs	r6, #0
 800410a:	42a6      	cmp	r6, r4
 800410c:	d105      	bne.n	800411a <__libc_init_array+0x2e>
 800410e:	bd70      	pop	{r4, r5, r6, pc}
 8004110:	f855 3b04 	ldr.w	r3, [r5], #4
 8004114:	4798      	blx	r3
 8004116:	3601      	adds	r6, #1
 8004118:	e7ee      	b.n	80040f8 <__libc_init_array+0xc>
 800411a:	f855 3b04 	ldr.w	r3, [r5], #4
 800411e:	4798      	blx	r3
 8004120:	3601      	adds	r6, #1
 8004122:	e7f2      	b.n	800410a <__libc_init_array+0x1e>
 8004124:	08004bf8 	.word	0x08004bf8
 8004128:	08004bf8 	.word	0x08004bf8
 800412c:	08004bf8 	.word	0x08004bf8
 8004130:	08004bfc 	.word	0x08004bfc

08004134 <memset>:
 8004134:	4402      	add	r2, r0
 8004136:	4603      	mov	r3, r0
 8004138:	4293      	cmp	r3, r2
 800413a:	d100      	bne.n	800413e <memset+0xa>
 800413c:	4770      	bx	lr
 800413e:	f803 1b01 	strb.w	r1, [r3], #1
 8004142:	e7f9      	b.n	8004138 <memset+0x4>

08004144 <_puts_r>:
 8004144:	b570      	push	{r4, r5, r6, lr}
 8004146:	460e      	mov	r6, r1
 8004148:	4605      	mov	r5, r0
 800414a:	b118      	cbz	r0, 8004154 <_puts_r+0x10>
 800414c:	6983      	ldr	r3, [r0, #24]
 800414e:	b90b      	cbnz	r3, 8004154 <_puts_r+0x10>
 8004150:	f000 fa48 	bl	80045e4 <__sinit>
 8004154:	69ab      	ldr	r3, [r5, #24]
 8004156:	68ac      	ldr	r4, [r5, #8]
 8004158:	b913      	cbnz	r3, 8004160 <_puts_r+0x1c>
 800415a:	4628      	mov	r0, r5
 800415c:	f000 fa42 	bl	80045e4 <__sinit>
 8004160:	4b2c      	ldr	r3, [pc, #176]	; (8004214 <_puts_r+0xd0>)
 8004162:	429c      	cmp	r4, r3
 8004164:	d120      	bne.n	80041a8 <_puts_r+0x64>
 8004166:	686c      	ldr	r4, [r5, #4]
 8004168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800416a:	07db      	lsls	r3, r3, #31
 800416c:	d405      	bmi.n	800417a <_puts_r+0x36>
 800416e:	89a3      	ldrh	r3, [r4, #12]
 8004170:	0598      	lsls	r0, r3, #22
 8004172:	d402      	bmi.n	800417a <_puts_r+0x36>
 8004174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004176:	f000 fad3 	bl	8004720 <__retarget_lock_acquire_recursive>
 800417a:	89a3      	ldrh	r3, [r4, #12]
 800417c:	0719      	lsls	r1, r3, #28
 800417e:	d51d      	bpl.n	80041bc <_puts_r+0x78>
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	b1db      	cbz	r3, 80041bc <_puts_r+0x78>
 8004184:	3e01      	subs	r6, #1
 8004186:	68a3      	ldr	r3, [r4, #8]
 8004188:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800418c:	3b01      	subs	r3, #1
 800418e:	60a3      	str	r3, [r4, #8]
 8004190:	bb39      	cbnz	r1, 80041e2 <_puts_r+0x9e>
 8004192:	2b00      	cmp	r3, #0
 8004194:	da38      	bge.n	8004208 <_puts_r+0xc4>
 8004196:	4622      	mov	r2, r4
 8004198:	210a      	movs	r1, #10
 800419a:	4628      	mov	r0, r5
 800419c:	f000 f848 	bl	8004230 <__swbuf_r>
 80041a0:	3001      	adds	r0, #1
 80041a2:	d011      	beq.n	80041c8 <_puts_r+0x84>
 80041a4:	250a      	movs	r5, #10
 80041a6:	e011      	b.n	80041cc <_puts_r+0x88>
 80041a8:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <_puts_r+0xd4>)
 80041aa:	429c      	cmp	r4, r3
 80041ac:	d101      	bne.n	80041b2 <_puts_r+0x6e>
 80041ae:	68ac      	ldr	r4, [r5, #8]
 80041b0:	e7da      	b.n	8004168 <_puts_r+0x24>
 80041b2:	4b1a      	ldr	r3, [pc, #104]	; (800421c <_puts_r+0xd8>)
 80041b4:	429c      	cmp	r4, r3
 80041b6:	bf08      	it	eq
 80041b8:	68ec      	ldreq	r4, [r5, #12]
 80041ba:	e7d5      	b.n	8004168 <_puts_r+0x24>
 80041bc:	4621      	mov	r1, r4
 80041be:	4628      	mov	r0, r5
 80041c0:	f000 f888 	bl	80042d4 <__swsetup_r>
 80041c4:	2800      	cmp	r0, #0
 80041c6:	d0dd      	beq.n	8004184 <_puts_r+0x40>
 80041c8:	f04f 35ff 	mov.w	r5, #4294967295
 80041cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041ce:	07da      	lsls	r2, r3, #31
 80041d0:	d405      	bmi.n	80041de <_puts_r+0x9a>
 80041d2:	89a3      	ldrh	r3, [r4, #12]
 80041d4:	059b      	lsls	r3, r3, #22
 80041d6:	d402      	bmi.n	80041de <_puts_r+0x9a>
 80041d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041da:	f000 faa2 	bl	8004722 <__retarget_lock_release_recursive>
 80041de:	4628      	mov	r0, r5
 80041e0:	bd70      	pop	{r4, r5, r6, pc}
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	da04      	bge.n	80041f0 <_puts_r+0xac>
 80041e6:	69a2      	ldr	r2, [r4, #24]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	dc06      	bgt.n	80041fa <_puts_r+0xb6>
 80041ec:	290a      	cmp	r1, #10
 80041ee:	d004      	beq.n	80041fa <_puts_r+0xb6>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	6022      	str	r2, [r4, #0]
 80041f6:	7019      	strb	r1, [r3, #0]
 80041f8:	e7c5      	b.n	8004186 <_puts_r+0x42>
 80041fa:	4622      	mov	r2, r4
 80041fc:	4628      	mov	r0, r5
 80041fe:	f000 f817 	bl	8004230 <__swbuf_r>
 8004202:	3001      	adds	r0, #1
 8004204:	d1bf      	bne.n	8004186 <_puts_r+0x42>
 8004206:	e7df      	b.n	80041c8 <_puts_r+0x84>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	250a      	movs	r5, #10
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	6022      	str	r2, [r4, #0]
 8004210:	701d      	strb	r5, [r3, #0]
 8004212:	e7db      	b.n	80041cc <_puts_r+0x88>
 8004214:	08004bb0 	.word	0x08004bb0
 8004218:	08004bd0 	.word	0x08004bd0
 800421c:	08004b90 	.word	0x08004b90

08004220 <puts>:
 8004220:	4b02      	ldr	r3, [pc, #8]	; (800422c <puts+0xc>)
 8004222:	4601      	mov	r1, r0
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	f7ff bf8d 	b.w	8004144 <_puts_r>
 800422a:	bf00      	nop
 800422c:	2000000c 	.word	0x2000000c

08004230 <__swbuf_r>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	460e      	mov	r6, r1
 8004234:	4614      	mov	r4, r2
 8004236:	4605      	mov	r5, r0
 8004238:	b118      	cbz	r0, 8004242 <__swbuf_r+0x12>
 800423a:	6983      	ldr	r3, [r0, #24]
 800423c:	b90b      	cbnz	r3, 8004242 <__swbuf_r+0x12>
 800423e:	f000 f9d1 	bl	80045e4 <__sinit>
 8004242:	4b21      	ldr	r3, [pc, #132]	; (80042c8 <__swbuf_r+0x98>)
 8004244:	429c      	cmp	r4, r3
 8004246:	d12b      	bne.n	80042a0 <__swbuf_r+0x70>
 8004248:	686c      	ldr	r4, [r5, #4]
 800424a:	69a3      	ldr	r3, [r4, #24]
 800424c:	60a3      	str	r3, [r4, #8]
 800424e:	89a3      	ldrh	r3, [r4, #12]
 8004250:	071a      	lsls	r2, r3, #28
 8004252:	d52f      	bpl.n	80042b4 <__swbuf_r+0x84>
 8004254:	6923      	ldr	r3, [r4, #16]
 8004256:	b36b      	cbz	r3, 80042b4 <__swbuf_r+0x84>
 8004258:	6923      	ldr	r3, [r4, #16]
 800425a:	6820      	ldr	r0, [r4, #0]
 800425c:	1ac0      	subs	r0, r0, r3
 800425e:	6963      	ldr	r3, [r4, #20]
 8004260:	b2f6      	uxtb	r6, r6
 8004262:	4283      	cmp	r3, r0
 8004264:	4637      	mov	r7, r6
 8004266:	dc04      	bgt.n	8004272 <__swbuf_r+0x42>
 8004268:	4621      	mov	r1, r4
 800426a:	4628      	mov	r0, r5
 800426c:	f000 f926 	bl	80044bc <_fflush_r>
 8004270:	bb30      	cbnz	r0, 80042c0 <__swbuf_r+0x90>
 8004272:	68a3      	ldr	r3, [r4, #8]
 8004274:	3b01      	subs	r3, #1
 8004276:	60a3      	str	r3, [r4, #8]
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	6022      	str	r2, [r4, #0]
 800427e:	701e      	strb	r6, [r3, #0]
 8004280:	6963      	ldr	r3, [r4, #20]
 8004282:	3001      	adds	r0, #1
 8004284:	4283      	cmp	r3, r0
 8004286:	d004      	beq.n	8004292 <__swbuf_r+0x62>
 8004288:	89a3      	ldrh	r3, [r4, #12]
 800428a:	07db      	lsls	r3, r3, #31
 800428c:	d506      	bpl.n	800429c <__swbuf_r+0x6c>
 800428e:	2e0a      	cmp	r6, #10
 8004290:	d104      	bne.n	800429c <__swbuf_r+0x6c>
 8004292:	4621      	mov	r1, r4
 8004294:	4628      	mov	r0, r5
 8004296:	f000 f911 	bl	80044bc <_fflush_r>
 800429a:	b988      	cbnz	r0, 80042c0 <__swbuf_r+0x90>
 800429c:	4638      	mov	r0, r7
 800429e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <__swbuf_r+0x9c>)
 80042a2:	429c      	cmp	r4, r3
 80042a4:	d101      	bne.n	80042aa <__swbuf_r+0x7a>
 80042a6:	68ac      	ldr	r4, [r5, #8]
 80042a8:	e7cf      	b.n	800424a <__swbuf_r+0x1a>
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <__swbuf_r+0xa0>)
 80042ac:	429c      	cmp	r4, r3
 80042ae:	bf08      	it	eq
 80042b0:	68ec      	ldreq	r4, [r5, #12]
 80042b2:	e7ca      	b.n	800424a <__swbuf_r+0x1a>
 80042b4:	4621      	mov	r1, r4
 80042b6:	4628      	mov	r0, r5
 80042b8:	f000 f80c 	bl	80042d4 <__swsetup_r>
 80042bc:	2800      	cmp	r0, #0
 80042be:	d0cb      	beq.n	8004258 <__swbuf_r+0x28>
 80042c0:	f04f 37ff 	mov.w	r7, #4294967295
 80042c4:	e7ea      	b.n	800429c <__swbuf_r+0x6c>
 80042c6:	bf00      	nop
 80042c8:	08004bb0 	.word	0x08004bb0
 80042cc:	08004bd0 	.word	0x08004bd0
 80042d0:	08004b90 	.word	0x08004b90

080042d4 <__swsetup_r>:
 80042d4:	4b32      	ldr	r3, [pc, #200]	; (80043a0 <__swsetup_r+0xcc>)
 80042d6:	b570      	push	{r4, r5, r6, lr}
 80042d8:	681d      	ldr	r5, [r3, #0]
 80042da:	4606      	mov	r6, r0
 80042dc:	460c      	mov	r4, r1
 80042de:	b125      	cbz	r5, 80042ea <__swsetup_r+0x16>
 80042e0:	69ab      	ldr	r3, [r5, #24]
 80042e2:	b913      	cbnz	r3, 80042ea <__swsetup_r+0x16>
 80042e4:	4628      	mov	r0, r5
 80042e6:	f000 f97d 	bl	80045e4 <__sinit>
 80042ea:	4b2e      	ldr	r3, [pc, #184]	; (80043a4 <__swsetup_r+0xd0>)
 80042ec:	429c      	cmp	r4, r3
 80042ee:	d10f      	bne.n	8004310 <__swsetup_r+0x3c>
 80042f0:	686c      	ldr	r4, [r5, #4]
 80042f2:	89a3      	ldrh	r3, [r4, #12]
 80042f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042f8:	0719      	lsls	r1, r3, #28
 80042fa:	d42c      	bmi.n	8004356 <__swsetup_r+0x82>
 80042fc:	06dd      	lsls	r5, r3, #27
 80042fe:	d411      	bmi.n	8004324 <__swsetup_r+0x50>
 8004300:	2309      	movs	r3, #9
 8004302:	6033      	str	r3, [r6, #0]
 8004304:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004308:	81a3      	strh	r3, [r4, #12]
 800430a:	f04f 30ff 	mov.w	r0, #4294967295
 800430e:	e03e      	b.n	800438e <__swsetup_r+0xba>
 8004310:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <__swsetup_r+0xd4>)
 8004312:	429c      	cmp	r4, r3
 8004314:	d101      	bne.n	800431a <__swsetup_r+0x46>
 8004316:	68ac      	ldr	r4, [r5, #8]
 8004318:	e7eb      	b.n	80042f2 <__swsetup_r+0x1e>
 800431a:	4b24      	ldr	r3, [pc, #144]	; (80043ac <__swsetup_r+0xd8>)
 800431c:	429c      	cmp	r4, r3
 800431e:	bf08      	it	eq
 8004320:	68ec      	ldreq	r4, [r5, #12]
 8004322:	e7e6      	b.n	80042f2 <__swsetup_r+0x1e>
 8004324:	0758      	lsls	r0, r3, #29
 8004326:	d512      	bpl.n	800434e <__swsetup_r+0x7a>
 8004328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800432a:	b141      	cbz	r1, 800433e <__swsetup_r+0x6a>
 800432c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004330:	4299      	cmp	r1, r3
 8004332:	d002      	beq.n	800433a <__swsetup_r+0x66>
 8004334:	4630      	mov	r0, r6
 8004336:	f000 fa5b 	bl	80047f0 <_free_r>
 800433a:	2300      	movs	r3, #0
 800433c:	6363      	str	r3, [r4, #52]	; 0x34
 800433e:	89a3      	ldrh	r3, [r4, #12]
 8004340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004344:	81a3      	strh	r3, [r4, #12]
 8004346:	2300      	movs	r3, #0
 8004348:	6063      	str	r3, [r4, #4]
 800434a:	6923      	ldr	r3, [r4, #16]
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	89a3      	ldrh	r3, [r4, #12]
 8004350:	f043 0308 	orr.w	r3, r3, #8
 8004354:	81a3      	strh	r3, [r4, #12]
 8004356:	6923      	ldr	r3, [r4, #16]
 8004358:	b94b      	cbnz	r3, 800436e <__swsetup_r+0x9a>
 800435a:	89a3      	ldrh	r3, [r4, #12]
 800435c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004364:	d003      	beq.n	800436e <__swsetup_r+0x9a>
 8004366:	4621      	mov	r1, r4
 8004368:	4630      	mov	r0, r6
 800436a:	f000 fa01 	bl	8004770 <__smakebuf_r>
 800436e:	89a0      	ldrh	r0, [r4, #12]
 8004370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004374:	f010 0301 	ands.w	r3, r0, #1
 8004378:	d00a      	beq.n	8004390 <__swsetup_r+0xbc>
 800437a:	2300      	movs	r3, #0
 800437c:	60a3      	str	r3, [r4, #8]
 800437e:	6963      	ldr	r3, [r4, #20]
 8004380:	425b      	negs	r3, r3
 8004382:	61a3      	str	r3, [r4, #24]
 8004384:	6923      	ldr	r3, [r4, #16]
 8004386:	b943      	cbnz	r3, 800439a <__swsetup_r+0xc6>
 8004388:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800438c:	d1ba      	bne.n	8004304 <__swsetup_r+0x30>
 800438e:	bd70      	pop	{r4, r5, r6, pc}
 8004390:	0781      	lsls	r1, r0, #30
 8004392:	bf58      	it	pl
 8004394:	6963      	ldrpl	r3, [r4, #20]
 8004396:	60a3      	str	r3, [r4, #8]
 8004398:	e7f4      	b.n	8004384 <__swsetup_r+0xb0>
 800439a:	2000      	movs	r0, #0
 800439c:	e7f7      	b.n	800438e <__swsetup_r+0xba>
 800439e:	bf00      	nop
 80043a0:	2000000c 	.word	0x2000000c
 80043a4:	08004bb0 	.word	0x08004bb0
 80043a8:	08004bd0 	.word	0x08004bd0
 80043ac:	08004b90 	.word	0x08004b90

080043b0 <__sflush_r>:
 80043b0:	898a      	ldrh	r2, [r1, #12]
 80043b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b6:	4605      	mov	r5, r0
 80043b8:	0710      	lsls	r0, r2, #28
 80043ba:	460c      	mov	r4, r1
 80043bc:	d458      	bmi.n	8004470 <__sflush_r+0xc0>
 80043be:	684b      	ldr	r3, [r1, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	dc05      	bgt.n	80043d0 <__sflush_r+0x20>
 80043c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	dc02      	bgt.n	80043d0 <__sflush_r+0x20>
 80043ca:	2000      	movs	r0, #0
 80043cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043d2:	2e00      	cmp	r6, #0
 80043d4:	d0f9      	beq.n	80043ca <__sflush_r+0x1a>
 80043d6:	2300      	movs	r3, #0
 80043d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043dc:	682f      	ldr	r7, [r5, #0]
 80043de:	602b      	str	r3, [r5, #0]
 80043e0:	d032      	beq.n	8004448 <__sflush_r+0x98>
 80043e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043e4:	89a3      	ldrh	r3, [r4, #12]
 80043e6:	075a      	lsls	r2, r3, #29
 80043e8:	d505      	bpl.n	80043f6 <__sflush_r+0x46>
 80043ea:	6863      	ldr	r3, [r4, #4]
 80043ec:	1ac0      	subs	r0, r0, r3
 80043ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043f0:	b10b      	cbz	r3, 80043f6 <__sflush_r+0x46>
 80043f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043f4:	1ac0      	subs	r0, r0, r3
 80043f6:	2300      	movs	r3, #0
 80043f8:	4602      	mov	r2, r0
 80043fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043fc:	6a21      	ldr	r1, [r4, #32]
 80043fe:	4628      	mov	r0, r5
 8004400:	47b0      	blx	r6
 8004402:	1c43      	adds	r3, r0, #1
 8004404:	89a3      	ldrh	r3, [r4, #12]
 8004406:	d106      	bne.n	8004416 <__sflush_r+0x66>
 8004408:	6829      	ldr	r1, [r5, #0]
 800440a:	291d      	cmp	r1, #29
 800440c:	d82c      	bhi.n	8004468 <__sflush_r+0xb8>
 800440e:	4a2a      	ldr	r2, [pc, #168]	; (80044b8 <__sflush_r+0x108>)
 8004410:	40ca      	lsrs	r2, r1
 8004412:	07d6      	lsls	r6, r2, #31
 8004414:	d528      	bpl.n	8004468 <__sflush_r+0xb8>
 8004416:	2200      	movs	r2, #0
 8004418:	6062      	str	r2, [r4, #4]
 800441a:	04d9      	lsls	r1, r3, #19
 800441c:	6922      	ldr	r2, [r4, #16]
 800441e:	6022      	str	r2, [r4, #0]
 8004420:	d504      	bpl.n	800442c <__sflush_r+0x7c>
 8004422:	1c42      	adds	r2, r0, #1
 8004424:	d101      	bne.n	800442a <__sflush_r+0x7a>
 8004426:	682b      	ldr	r3, [r5, #0]
 8004428:	b903      	cbnz	r3, 800442c <__sflush_r+0x7c>
 800442a:	6560      	str	r0, [r4, #84]	; 0x54
 800442c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800442e:	602f      	str	r7, [r5, #0]
 8004430:	2900      	cmp	r1, #0
 8004432:	d0ca      	beq.n	80043ca <__sflush_r+0x1a>
 8004434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004438:	4299      	cmp	r1, r3
 800443a:	d002      	beq.n	8004442 <__sflush_r+0x92>
 800443c:	4628      	mov	r0, r5
 800443e:	f000 f9d7 	bl	80047f0 <_free_r>
 8004442:	2000      	movs	r0, #0
 8004444:	6360      	str	r0, [r4, #52]	; 0x34
 8004446:	e7c1      	b.n	80043cc <__sflush_r+0x1c>
 8004448:	6a21      	ldr	r1, [r4, #32]
 800444a:	2301      	movs	r3, #1
 800444c:	4628      	mov	r0, r5
 800444e:	47b0      	blx	r6
 8004450:	1c41      	adds	r1, r0, #1
 8004452:	d1c7      	bne.n	80043e4 <__sflush_r+0x34>
 8004454:	682b      	ldr	r3, [r5, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0c4      	beq.n	80043e4 <__sflush_r+0x34>
 800445a:	2b1d      	cmp	r3, #29
 800445c:	d001      	beq.n	8004462 <__sflush_r+0xb2>
 800445e:	2b16      	cmp	r3, #22
 8004460:	d101      	bne.n	8004466 <__sflush_r+0xb6>
 8004462:	602f      	str	r7, [r5, #0]
 8004464:	e7b1      	b.n	80043ca <__sflush_r+0x1a>
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800446c:	81a3      	strh	r3, [r4, #12]
 800446e:	e7ad      	b.n	80043cc <__sflush_r+0x1c>
 8004470:	690f      	ldr	r7, [r1, #16]
 8004472:	2f00      	cmp	r7, #0
 8004474:	d0a9      	beq.n	80043ca <__sflush_r+0x1a>
 8004476:	0793      	lsls	r3, r2, #30
 8004478:	680e      	ldr	r6, [r1, #0]
 800447a:	bf08      	it	eq
 800447c:	694b      	ldreq	r3, [r1, #20]
 800447e:	600f      	str	r7, [r1, #0]
 8004480:	bf18      	it	ne
 8004482:	2300      	movne	r3, #0
 8004484:	eba6 0807 	sub.w	r8, r6, r7
 8004488:	608b      	str	r3, [r1, #8]
 800448a:	f1b8 0f00 	cmp.w	r8, #0
 800448e:	dd9c      	ble.n	80043ca <__sflush_r+0x1a>
 8004490:	6a21      	ldr	r1, [r4, #32]
 8004492:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004494:	4643      	mov	r3, r8
 8004496:	463a      	mov	r2, r7
 8004498:	4628      	mov	r0, r5
 800449a:	47b0      	blx	r6
 800449c:	2800      	cmp	r0, #0
 800449e:	dc06      	bgt.n	80044ae <__sflush_r+0xfe>
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044a6:	81a3      	strh	r3, [r4, #12]
 80044a8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ac:	e78e      	b.n	80043cc <__sflush_r+0x1c>
 80044ae:	4407      	add	r7, r0
 80044b0:	eba8 0800 	sub.w	r8, r8, r0
 80044b4:	e7e9      	b.n	800448a <__sflush_r+0xda>
 80044b6:	bf00      	nop
 80044b8:	20400001 	.word	0x20400001

080044bc <_fflush_r>:
 80044bc:	b538      	push	{r3, r4, r5, lr}
 80044be:	690b      	ldr	r3, [r1, #16]
 80044c0:	4605      	mov	r5, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	b913      	cbnz	r3, 80044cc <_fflush_r+0x10>
 80044c6:	2500      	movs	r5, #0
 80044c8:	4628      	mov	r0, r5
 80044ca:	bd38      	pop	{r3, r4, r5, pc}
 80044cc:	b118      	cbz	r0, 80044d6 <_fflush_r+0x1a>
 80044ce:	6983      	ldr	r3, [r0, #24]
 80044d0:	b90b      	cbnz	r3, 80044d6 <_fflush_r+0x1a>
 80044d2:	f000 f887 	bl	80045e4 <__sinit>
 80044d6:	4b14      	ldr	r3, [pc, #80]	; (8004528 <_fflush_r+0x6c>)
 80044d8:	429c      	cmp	r4, r3
 80044da:	d11b      	bne.n	8004514 <_fflush_r+0x58>
 80044dc:	686c      	ldr	r4, [r5, #4]
 80044de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0ef      	beq.n	80044c6 <_fflush_r+0xa>
 80044e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044e8:	07d0      	lsls	r0, r2, #31
 80044ea:	d404      	bmi.n	80044f6 <_fflush_r+0x3a>
 80044ec:	0599      	lsls	r1, r3, #22
 80044ee:	d402      	bmi.n	80044f6 <_fflush_r+0x3a>
 80044f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044f2:	f000 f915 	bl	8004720 <__retarget_lock_acquire_recursive>
 80044f6:	4628      	mov	r0, r5
 80044f8:	4621      	mov	r1, r4
 80044fa:	f7ff ff59 	bl	80043b0 <__sflush_r>
 80044fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004500:	07da      	lsls	r2, r3, #31
 8004502:	4605      	mov	r5, r0
 8004504:	d4e0      	bmi.n	80044c8 <_fflush_r+0xc>
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	059b      	lsls	r3, r3, #22
 800450a:	d4dd      	bmi.n	80044c8 <_fflush_r+0xc>
 800450c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800450e:	f000 f908 	bl	8004722 <__retarget_lock_release_recursive>
 8004512:	e7d9      	b.n	80044c8 <_fflush_r+0xc>
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <_fflush_r+0x70>)
 8004516:	429c      	cmp	r4, r3
 8004518:	d101      	bne.n	800451e <_fflush_r+0x62>
 800451a:	68ac      	ldr	r4, [r5, #8]
 800451c:	e7df      	b.n	80044de <_fflush_r+0x22>
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <_fflush_r+0x74>)
 8004520:	429c      	cmp	r4, r3
 8004522:	bf08      	it	eq
 8004524:	68ec      	ldreq	r4, [r5, #12]
 8004526:	e7da      	b.n	80044de <_fflush_r+0x22>
 8004528:	08004bb0 	.word	0x08004bb0
 800452c:	08004bd0 	.word	0x08004bd0
 8004530:	08004b90 	.word	0x08004b90

08004534 <std>:
 8004534:	2300      	movs	r3, #0
 8004536:	b510      	push	{r4, lr}
 8004538:	4604      	mov	r4, r0
 800453a:	e9c0 3300 	strd	r3, r3, [r0]
 800453e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004542:	6083      	str	r3, [r0, #8]
 8004544:	8181      	strh	r1, [r0, #12]
 8004546:	6643      	str	r3, [r0, #100]	; 0x64
 8004548:	81c2      	strh	r2, [r0, #14]
 800454a:	6183      	str	r3, [r0, #24]
 800454c:	4619      	mov	r1, r3
 800454e:	2208      	movs	r2, #8
 8004550:	305c      	adds	r0, #92	; 0x5c
 8004552:	f7ff fdef 	bl	8004134 <memset>
 8004556:	4b05      	ldr	r3, [pc, #20]	; (800456c <std+0x38>)
 8004558:	6263      	str	r3, [r4, #36]	; 0x24
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <std+0x3c>)
 800455c:	62a3      	str	r3, [r4, #40]	; 0x28
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <std+0x40>)
 8004560:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <std+0x44>)
 8004564:	6224      	str	r4, [r4, #32]
 8004566:	6323      	str	r3, [r4, #48]	; 0x30
 8004568:	bd10      	pop	{r4, pc}
 800456a:	bf00      	nop
 800456c:	080049d1 	.word	0x080049d1
 8004570:	080049f3 	.word	0x080049f3
 8004574:	08004a2b 	.word	0x08004a2b
 8004578:	08004a4f 	.word	0x08004a4f

0800457c <_cleanup_r>:
 800457c:	4901      	ldr	r1, [pc, #4]	; (8004584 <_cleanup_r+0x8>)
 800457e:	f000 b8af 	b.w	80046e0 <_fwalk_reent>
 8004582:	bf00      	nop
 8004584:	080044bd 	.word	0x080044bd

08004588 <__sfmoreglue>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	2268      	movs	r2, #104	; 0x68
 800458c:	1e4d      	subs	r5, r1, #1
 800458e:	4355      	muls	r5, r2
 8004590:	460e      	mov	r6, r1
 8004592:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004596:	f000 f997 	bl	80048c8 <_malloc_r>
 800459a:	4604      	mov	r4, r0
 800459c:	b140      	cbz	r0, 80045b0 <__sfmoreglue+0x28>
 800459e:	2100      	movs	r1, #0
 80045a0:	e9c0 1600 	strd	r1, r6, [r0]
 80045a4:	300c      	adds	r0, #12
 80045a6:	60a0      	str	r0, [r4, #8]
 80045a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045ac:	f7ff fdc2 	bl	8004134 <memset>
 80045b0:	4620      	mov	r0, r4
 80045b2:	bd70      	pop	{r4, r5, r6, pc}

080045b4 <__sfp_lock_acquire>:
 80045b4:	4801      	ldr	r0, [pc, #4]	; (80045bc <__sfp_lock_acquire+0x8>)
 80045b6:	f000 b8b3 	b.w	8004720 <__retarget_lock_acquire_recursive>
 80045ba:	bf00      	nop
 80045bc:	20000859 	.word	0x20000859

080045c0 <__sfp_lock_release>:
 80045c0:	4801      	ldr	r0, [pc, #4]	; (80045c8 <__sfp_lock_release+0x8>)
 80045c2:	f000 b8ae 	b.w	8004722 <__retarget_lock_release_recursive>
 80045c6:	bf00      	nop
 80045c8:	20000859 	.word	0x20000859

080045cc <__sinit_lock_acquire>:
 80045cc:	4801      	ldr	r0, [pc, #4]	; (80045d4 <__sinit_lock_acquire+0x8>)
 80045ce:	f000 b8a7 	b.w	8004720 <__retarget_lock_acquire_recursive>
 80045d2:	bf00      	nop
 80045d4:	2000085a 	.word	0x2000085a

080045d8 <__sinit_lock_release>:
 80045d8:	4801      	ldr	r0, [pc, #4]	; (80045e0 <__sinit_lock_release+0x8>)
 80045da:	f000 b8a2 	b.w	8004722 <__retarget_lock_release_recursive>
 80045de:	bf00      	nop
 80045e0:	2000085a 	.word	0x2000085a

080045e4 <__sinit>:
 80045e4:	b510      	push	{r4, lr}
 80045e6:	4604      	mov	r4, r0
 80045e8:	f7ff fff0 	bl	80045cc <__sinit_lock_acquire>
 80045ec:	69a3      	ldr	r3, [r4, #24]
 80045ee:	b11b      	cbz	r3, 80045f8 <__sinit+0x14>
 80045f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f4:	f7ff bff0 	b.w	80045d8 <__sinit_lock_release>
 80045f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80045fc:	6523      	str	r3, [r4, #80]	; 0x50
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <__sinit+0x68>)
 8004600:	4a13      	ldr	r2, [pc, #76]	; (8004650 <__sinit+0x6c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	62a2      	str	r2, [r4, #40]	; 0x28
 8004606:	42a3      	cmp	r3, r4
 8004608:	bf04      	itt	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	61a3      	streq	r3, [r4, #24]
 800460e:	4620      	mov	r0, r4
 8004610:	f000 f820 	bl	8004654 <__sfp>
 8004614:	6060      	str	r0, [r4, #4]
 8004616:	4620      	mov	r0, r4
 8004618:	f000 f81c 	bl	8004654 <__sfp>
 800461c:	60a0      	str	r0, [r4, #8]
 800461e:	4620      	mov	r0, r4
 8004620:	f000 f818 	bl	8004654 <__sfp>
 8004624:	2200      	movs	r2, #0
 8004626:	60e0      	str	r0, [r4, #12]
 8004628:	2104      	movs	r1, #4
 800462a:	6860      	ldr	r0, [r4, #4]
 800462c:	f7ff ff82 	bl	8004534 <std>
 8004630:	68a0      	ldr	r0, [r4, #8]
 8004632:	2201      	movs	r2, #1
 8004634:	2109      	movs	r1, #9
 8004636:	f7ff ff7d 	bl	8004534 <std>
 800463a:	68e0      	ldr	r0, [r4, #12]
 800463c:	2202      	movs	r2, #2
 800463e:	2112      	movs	r1, #18
 8004640:	f7ff ff78 	bl	8004534 <std>
 8004644:	2301      	movs	r3, #1
 8004646:	61a3      	str	r3, [r4, #24]
 8004648:	e7d2      	b.n	80045f0 <__sinit+0xc>
 800464a:	bf00      	nop
 800464c:	08004b8c 	.word	0x08004b8c
 8004650:	0800457d 	.word	0x0800457d

08004654 <__sfp>:
 8004654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004656:	4607      	mov	r7, r0
 8004658:	f7ff ffac 	bl	80045b4 <__sfp_lock_acquire>
 800465c:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <__sfp+0x84>)
 800465e:	681e      	ldr	r6, [r3, #0]
 8004660:	69b3      	ldr	r3, [r6, #24]
 8004662:	b913      	cbnz	r3, 800466a <__sfp+0x16>
 8004664:	4630      	mov	r0, r6
 8004666:	f7ff ffbd 	bl	80045e4 <__sinit>
 800466a:	3648      	adds	r6, #72	; 0x48
 800466c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004670:	3b01      	subs	r3, #1
 8004672:	d503      	bpl.n	800467c <__sfp+0x28>
 8004674:	6833      	ldr	r3, [r6, #0]
 8004676:	b30b      	cbz	r3, 80046bc <__sfp+0x68>
 8004678:	6836      	ldr	r6, [r6, #0]
 800467a:	e7f7      	b.n	800466c <__sfp+0x18>
 800467c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004680:	b9d5      	cbnz	r5, 80046b8 <__sfp+0x64>
 8004682:	4b16      	ldr	r3, [pc, #88]	; (80046dc <__sfp+0x88>)
 8004684:	60e3      	str	r3, [r4, #12]
 8004686:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800468a:	6665      	str	r5, [r4, #100]	; 0x64
 800468c:	f000 f847 	bl	800471e <__retarget_lock_init_recursive>
 8004690:	f7ff ff96 	bl	80045c0 <__sfp_lock_release>
 8004694:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004698:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800469c:	6025      	str	r5, [r4, #0]
 800469e:	61a5      	str	r5, [r4, #24]
 80046a0:	2208      	movs	r2, #8
 80046a2:	4629      	mov	r1, r5
 80046a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046a8:	f7ff fd44 	bl	8004134 <memset>
 80046ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046b4:	4620      	mov	r0, r4
 80046b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b8:	3468      	adds	r4, #104	; 0x68
 80046ba:	e7d9      	b.n	8004670 <__sfp+0x1c>
 80046bc:	2104      	movs	r1, #4
 80046be:	4638      	mov	r0, r7
 80046c0:	f7ff ff62 	bl	8004588 <__sfmoreglue>
 80046c4:	4604      	mov	r4, r0
 80046c6:	6030      	str	r0, [r6, #0]
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d1d5      	bne.n	8004678 <__sfp+0x24>
 80046cc:	f7ff ff78 	bl	80045c0 <__sfp_lock_release>
 80046d0:	230c      	movs	r3, #12
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	e7ee      	b.n	80046b4 <__sfp+0x60>
 80046d6:	bf00      	nop
 80046d8:	08004b8c 	.word	0x08004b8c
 80046dc:	ffff0001 	.word	0xffff0001

080046e0 <_fwalk_reent>:
 80046e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046e4:	4606      	mov	r6, r0
 80046e6:	4688      	mov	r8, r1
 80046e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046ec:	2700      	movs	r7, #0
 80046ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046f2:	f1b9 0901 	subs.w	r9, r9, #1
 80046f6:	d505      	bpl.n	8004704 <_fwalk_reent+0x24>
 80046f8:	6824      	ldr	r4, [r4, #0]
 80046fa:	2c00      	cmp	r4, #0
 80046fc:	d1f7      	bne.n	80046ee <_fwalk_reent+0xe>
 80046fe:	4638      	mov	r0, r7
 8004700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004704:	89ab      	ldrh	r3, [r5, #12]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d907      	bls.n	800471a <_fwalk_reent+0x3a>
 800470a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800470e:	3301      	adds	r3, #1
 8004710:	d003      	beq.n	800471a <_fwalk_reent+0x3a>
 8004712:	4629      	mov	r1, r5
 8004714:	4630      	mov	r0, r6
 8004716:	47c0      	blx	r8
 8004718:	4307      	orrs	r7, r0
 800471a:	3568      	adds	r5, #104	; 0x68
 800471c:	e7e9      	b.n	80046f2 <_fwalk_reent+0x12>

0800471e <__retarget_lock_init_recursive>:
 800471e:	4770      	bx	lr

08004720 <__retarget_lock_acquire_recursive>:
 8004720:	4770      	bx	lr

08004722 <__retarget_lock_release_recursive>:
 8004722:	4770      	bx	lr

08004724 <__swhatbuf_r>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	460e      	mov	r6, r1
 8004728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800472c:	2900      	cmp	r1, #0
 800472e:	b096      	sub	sp, #88	; 0x58
 8004730:	4614      	mov	r4, r2
 8004732:	461d      	mov	r5, r3
 8004734:	da08      	bge.n	8004748 <__swhatbuf_r+0x24>
 8004736:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	602a      	str	r2, [r5, #0]
 800473e:	061a      	lsls	r2, r3, #24
 8004740:	d410      	bmi.n	8004764 <__swhatbuf_r+0x40>
 8004742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004746:	e00e      	b.n	8004766 <__swhatbuf_r+0x42>
 8004748:	466a      	mov	r2, sp
 800474a:	f000 f9a7 	bl	8004a9c <_fstat_r>
 800474e:	2800      	cmp	r0, #0
 8004750:	dbf1      	blt.n	8004736 <__swhatbuf_r+0x12>
 8004752:	9a01      	ldr	r2, [sp, #4]
 8004754:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004758:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800475c:	425a      	negs	r2, r3
 800475e:	415a      	adcs	r2, r3
 8004760:	602a      	str	r2, [r5, #0]
 8004762:	e7ee      	b.n	8004742 <__swhatbuf_r+0x1e>
 8004764:	2340      	movs	r3, #64	; 0x40
 8004766:	2000      	movs	r0, #0
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	b016      	add	sp, #88	; 0x58
 800476c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004770 <__smakebuf_r>:
 8004770:	898b      	ldrh	r3, [r1, #12]
 8004772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004774:	079d      	lsls	r5, r3, #30
 8004776:	4606      	mov	r6, r0
 8004778:	460c      	mov	r4, r1
 800477a:	d507      	bpl.n	800478c <__smakebuf_r+0x1c>
 800477c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004780:	6023      	str	r3, [r4, #0]
 8004782:	6123      	str	r3, [r4, #16]
 8004784:	2301      	movs	r3, #1
 8004786:	6163      	str	r3, [r4, #20]
 8004788:	b002      	add	sp, #8
 800478a:	bd70      	pop	{r4, r5, r6, pc}
 800478c:	ab01      	add	r3, sp, #4
 800478e:	466a      	mov	r2, sp
 8004790:	f7ff ffc8 	bl	8004724 <__swhatbuf_r>
 8004794:	9900      	ldr	r1, [sp, #0]
 8004796:	4605      	mov	r5, r0
 8004798:	4630      	mov	r0, r6
 800479a:	f000 f895 	bl	80048c8 <_malloc_r>
 800479e:	b948      	cbnz	r0, 80047b4 <__smakebuf_r+0x44>
 80047a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047a4:	059a      	lsls	r2, r3, #22
 80047a6:	d4ef      	bmi.n	8004788 <__smakebuf_r+0x18>
 80047a8:	f023 0303 	bic.w	r3, r3, #3
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	81a3      	strh	r3, [r4, #12]
 80047b2:	e7e3      	b.n	800477c <__smakebuf_r+0xc>
 80047b4:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <__smakebuf_r+0x7c>)
 80047b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	6020      	str	r0, [r4, #0]
 80047bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c0:	81a3      	strh	r3, [r4, #12]
 80047c2:	9b00      	ldr	r3, [sp, #0]
 80047c4:	6163      	str	r3, [r4, #20]
 80047c6:	9b01      	ldr	r3, [sp, #4]
 80047c8:	6120      	str	r0, [r4, #16]
 80047ca:	b15b      	cbz	r3, 80047e4 <__smakebuf_r+0x74>
 80047cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047d0:	4630      	mov	r0, r6
 80047d2:	f000 f975 	bl	8004ac0 <_isatty_r>
 80047d6:	b128      	cbz	r0, 80047e4 <__smakebuf_r+0x74>
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	f023 0303 	bic.w	r3, r3, #3
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	81a3      	strh	r3, [r4, #12]
 80047e4:	89a0      	ldrh	r0, [r4, #12]
 80047e6:	4305      	orrs	r5, r0
 80047e8:	81a5      	strh	r5, [r4, #12]
 80047ea:	e7cd      	b.n	8004788 <__smakebuf_r+0x18>
 80047ec:	0800457d 	.word	0x0800457d

080047f0 <_free_r>:
 80047f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047f2:	2900      	cmp	r1, #0
 80047f4:	d044      	beq.n	8004880 <_free_r+0x90>
 80047f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047fa:	9001      	str	r0, [sp, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f1a1 0404 	sub.w	r4, r1, #4
 8004802:	bfb8      	it	lt
 8004804:	18e4      	addlt	r4, r4, r3
 8004806:	f000 f97d 	bl	8004b04 <__malloc_lock>
 800480a:	4a1e      	ldr	r2, [pc, #120]	; (8004884 <_free_r+0x94>)
 800480c:	9801      	ldr	r0, [sp, #4]
 800480e:	6813      	ldr	r3, [r2, #0]
 8004810:	b933      	cbnz	r3, 8004820 <_free_r+0x30>
 8004812:	6063      	str	r3, [r4, #4]
 8004814:	6014      	str	r4, [r2, #0]
 8004816:	b003      	add	sp, #12
 8004818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800481c:	f000 b978 	b.w	8004b10 <__malloc_unlock>
 8004820:	42a3      	cmp	r3, r4
 8004822:	d908      	bls.n	8004836 <_free_r+0x46>
 8004824:	6825      	ldr	r5, [r4, #0]
 8004826:	1961      	adds	r1, r4, r5
 8004828:	428b      	cmp	r3, r1
 800482a:	bf01      	itttt	eq
 800482c:	6819      	ldreq	r1, [r3, #0]
 800482e:	685b      	ldreq	r3, [r3, #4]
 8004830:	1949      	addeq	r1, r1, r5
 8004832:	6021      	streq	r1, [r4, #0]
 8004834:	e7ed      	b.n	8004812 <_free_r+0x22>
 8004836:	461a      	mov	r2, r3
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	b10b      	cbz	r3, 8004840 <_free_r+0x50>
 800483c:	42a3      	cmp	r3, r4
 800483e:	d9fa      	bls.n	8004836 <_free_r+0x46>
 8004840:	6811      	ldr	r1, [r2, #0]
 8004842:	1855      	adds	r5, r2, r1
 8004844:	42a5      	cmp	r5, r4
 8004846:	d10b      	bne.n	8004860 <_free_r+0x70>
 8004848:	6824      	ldr	r4, [r4, #0]
 800484a:	4421      	add	r1, r4
 800484c:	1854      	adds	r4, r2, r1
 800484e:	42a3      	cmp	r3, r4
 8004850:	6011      	str	r1, [r2, #0]
 8004852:	d1e0      	bne.n	8004816 <_free_r+0x26>
 8004854:	681c      	ldr	r4, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	6053      	str	r3, [r2, #4]
 800485a:	4421      	add	r1, r4
 800485c:	6011      	str	r1, [r2, #0]
 800485e:	e7da      	b.n	8004816 <_free_r+0x26>
 8004860:	d902      	bls.n	8004868 <_free_r+0x78>
 8004862:	230c      	movs	r3, #12
 8004864:	6003      	str	r3, [r0, #0]
 8004866:	e7d6      	b.n	8004816 <_free_r+0x26>
 8004868:	6825      	ldr	r5, [r4, #0]
 800486a:	1961      	adds	r1, r4, r5
 800486c:	428b      	cmp	r3, r1
 800486e:	bf04      	itt	eq
 8004870:	6819      	ldreq	r1, [r3, #0]
 8004872:	685b      	ldreq	r3, [r3, #4]
 8004874:	6063      	str	r3, [r4, #4]
 8004876:	bf04      	itt	eq
 8004878:	1949      	addeq	r1, r1, r5
 800487a:	6021      	streq	r1, [r4, #0]
 800487c:	6054      	str	r4, [r2, #4]
 800487e:	e7ca      	b.n	8004816 <_free_r+0x26>
 8004880:	b003      	add	sp, #12
 8004882:	bd30      	pop	{r4, r5, pc}
 8004884:	2000085c 	.word	0x2000085c

08004888 <sbrk_aligned>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	4e0e      	ldr	r6, [pc, #56]	; (80048c4 <sbrk_aligned+0x3c>)
 800488c:	460c      	mov	r4, r1
 800488e:	6831      	ldr	r1, [r6, #0]
 8004890:	4605      	mov	r5, r0
 8004892:	b911      	cbnz	r1, 800489a <sbrk_aligned+0x12>
 8004894:	f000 f88c 	bl	80049b0 <_sbrk_r>
 8004898:	6030      	str	r0, [r6, #0]
 800489a:	4621      	mov	r1, r4
 800489c:	4628      	mov	r0, r5
 800489e:	f000 f887 	bl	80049b0 <_sbrk_r>
 80048a2:	1c43      	adds	r3, r0, #1
 80048a4:	d00a      	beq.n	80048bc <sbrk_aligned+0x34>
 80048a6:	1cc4      	adds	r4, r0, #3
 80048a8:	f024 0403 	bic.w	r4, r4, #3
 80048ac:	42a0      	cmp	r0, r4
 80048ae:	d007      	beq.n	80048c0 <sbrk_aligned+0x38>
 80048b0:	1a21      	subs	r1, r4, r0
 80048b2:	4628      	mov	r0, r5
 80048b4:	f000 f87c 	bl	80049b0 <_sbrk_r>
 80048b8:	3001      	adds	r0, #1
 80048ba:	d101      	bne.n	80048c0 <sbrk_aligned+0x38>
 80048bc:	f04f 34ff 	mov.w	r4, #4294967295
 80048c0:	4620      	mov	r0, r4
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	20000860 	.word	0x20000860

080048c8 <_malloc_r>:
 80048c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048cc:	1ccd      	adds	r5, r1, #3
 80048ce:	f025 0503 	bic.w	r5, r5, #3
 80048d2:	3508      	adds	r5, #8
 80048d4:	2d0c      	cmp	r5, #12
 80048d6:	bf38      	it	cc
 80048d8:	250c      	movcc	r5, #12
 80048da:	2d00      	cmp	r5, #0
 80048dc:	4607      	mov	r7, r0
 80048de:	db01      	blt.n	80048e4 <_malloc_r+0x1c>
 80048e0:	42a9      	cmp	r1, r5
 80048e2:	d905      	bls.n	80048f0 <_malloc_r+0x28>
 80048e4:	230c      	movs	r3, #12
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	2600      	movs	r6, #0
 80048ea:	4630      	mov	r0, r6
 80048ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048f0:	4e2e      	ldr	r6, [pc, #184]	; (80049ac <_malloc_r+0xe4>)
 80048f2:	f000 f907 	bl	8004b04 <__malloc_lock>
 80048f6:	6833      	ldr	r3, [r6, #0]
 80048f8:	461c      	mov	r4, r3
 80048fa:	bb34      	cbnz	r4, 800494a <_malloc_r+0x82>
 80048fc:	4629      	mov	r1, r5
 80048fe:	4638      	mov	r0, r7
 8004900:	f7ff ffc2 	bl	8004888 <sbrk_aligned>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	4604      	mov	r4, r0
 8004908:	d14d      	bne.n	80049a6 <_malloc_r+0xde>
 800490a:	6834      	ldr	r4, [r6, #0]
 800490c:	4626      	mov	r6, r4
 800490e:	2e00      	cmp	r6, #0
 8004910:	d140      	bne.n	8004994 <_malloc_r+0xcc>
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	4631      	mov	r1, r6
 8004916:	4638      	mov	r0, r7
 8004918:	eb04 0803 	add.w	r8, r4, r3
 800491c:	f000 f848 	bl	80049b0 <_sbrk_r>
 8004920:	4580      	cmp	r8, r0
 8004922:	d13a      	bne.n	800499a <_malloc_r+0xd2>
 8004924:	6821      	ldr	r1, [r4, #0]
 8004926:	3503      	adds	r5, #3
 8004928:	1a6d      	subs	r5, r5, r1
 800492a:	f025 0503 	bic.w	r5, r5, #3
 800492e:	3508      	adds	r5, #8
 8004930:	2d0c      	cmp	r5, #12
 8004932:	bf38      	it	cc
 8004934:	250c      	movcc	r5, #12
 8004936:	4629      	mov	r1, r5
 8004938:	4638      	mov	r0, r7
 800493a:	f7ff ffa5 	bl	8004888 <sbrk_aligned>
 800493e:	3001      	adds	r0, #1
 8004940:	d02b      	beq.n	800499a <_malloc_r+0xd2>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	442b      	add	r3, r5
 8004946:	6023      	str	r3, [r4, #0]
 8004948:	e00e      	b.n	8004968 <_malloc_r+0xa0>
 800494a:	6822      	ldr	r2, [r4, #0]
 800494c:	1b52      	subs	r2, r2, r5
 800494e:	d41e      	bmi.n	800498e <_malloc_r+0xc6>
 8004950:	2a0b      	cmp	r2, #11
 8004952:	d916      	bls.n	8004982 <_malloc_r+0xba>
 8004954:	1961      	adds	r1, r4, r5
 8004956:	42a3      	cmp	r3, r4
 8004958:	6025      	str	r5, [r4, #0]
 800495a:	bf18      	it	ne
 800495c:	6059      	strne	r1, [r3, #4]
 800495e:	6863      	ldr	r3, [r4, #4]
 8004960:	bf08      	it	eq
 8004962:	6031      	streq	r1, [r6, #0]
 8004964:	5162      	str	r2, [r4, r5]
 8004966:	604b      	str	r3, [r1, #4]
 8004968:	4638      	mov	r0, r7
 800496a:	f104 060b 	add.w	r6, r4, #11
 800496e:	f000 f8cf 	bl	8004b10 <__malloc_unlock>
 8004972:	f026 0607 	bic.w	r6, r6, #7
 8004976:	1d23      	adds	r3, r4, #4
 8004978:	1af2      	subs	r2, r6, r3
 800497a:	d0b6      	beq.n	80048ea <_malloc_r+0x22>
 800497c:	1b9b      	subs	r3, r3, r6
 800497e:	50a3      	str	r3, [r4, r2]
 8004980:	e7b3      	b.n	80048ea <_malloc_r+0x22>
 8004982:	6862      	ldr	r2, [r4, #4]
 8004984:	42a3      	cmp	r3, r4
 8004986:	bf0c      	ite	eq
 8004988:	6032      	streq	r2, [r6, #0]
 800498a:	605a      	strne	r2, [r3, #4]
 800498c:	e7ec      	b.n	8004968 <_malloc_r+0xa0>
 800498e:	4623      	mov	r3, r4
 8004990:	6864      	ldr	r4, [r4, #4]
 8004992:	e7b2      	b.n	80048fa <_malloc_r+0x32>
 8004994:	4634      	mov	r4, r6
 8004996:	6876      	ldr	r6, [r6, #4]
 8004998:	e7b9      	b.n	800490e <_malloc_r+0x46>
 800499a:	230c      	movs	r3, #12
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	4638      	mov	r0, r7
 80049a0:	f000 f8b6 	bl	8004b10 <__malloc_unlock>
 80049a4:	e7a1      	b.n	80048ea <_malloc_r+0x22>
 80049a6:	6025      	str	r5, [r4, #0]
 80049a8:	e7de      	b.n	8004968 <_malloc_r+0xa0>
 80049aa:	bf00      	nop
 80049ac:	2000085c 	.word	0x2000085c

080049b0 <_sbrk_r>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	4d06      	ldr	r5, [pc, #24]	; (80049cc <_sbrk_r+0x1c>)
 80049b4:	2300      	movs	r3, #0
 80049b6:	4604      	mov	r4, r0
 80049b8:	4608      	mov	r0, r1
 80049ba:	602b      	str	r3, [r5, #0]
 80049bc:	f7fc fa94 	bl	8000ee8 <_sbrk>
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	d102      	bne.n	80049ca <_sbrk_r+0x1a>
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	b103      	cbz	r3, 80049ca <_sbrk_r+0x1a>
 80049c8:	6023      	str	r3, [r4, #0]
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
 80049cc:	20000864 	.word	0x20000864

080049d0 <__sread>:
 80049d0:	b510      	push	{r4, lr}
 80049d2:	460c      	mov	r4, r1
 80049d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d8:	f000 f8a0 	bl	8004b1c <_read_r>
 80049dc:	2800      	cmp	r0, #0
 80049de:	bfab      	itete	ge
 80049e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049e2:	89a3      	ldrhlt	r3, [r4, #12]
 80049e4:	181b      	addge	r3, r3, r0
 80049e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049ea:	bfac      	ite	ge
 80049ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80049ee:	81a3      	strhlt	r3, [r4, #12]
 80049f0:	bd10      	pop	{r4, pc}

080049f2 <__swrite>:
 80049f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f6:	461f      	mov	r7, r3
 80049f8:	898b      	ldrh	r3, [r1, #12]
 80049fa:	05db      	lsls	r3, r3, #23
 80049fc:	4605      	mov	r5, r0
 80049fe:	460c      	mov	r4, r1
 8004a00:	4616      	mov	r6, r2
 8004a02:	d505      	bpl.n	8004a10 <__swrite+0x1e>
 8004a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a08:	2302      	movs	r3, #2
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f000 f868 	bl	8004ae0 <_lseek_r>
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a1a:	81a3      	strh	r3, [r4, #12]
 8004a1c:	4632      	mov	r2, r6
 8004a1e:	463b      	mov	r3, r7
 8004a20:	4628      	mov	r0, r5
 8004a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a26:	f000 b817 	b.w	8004a58 <_write_r>

08004a2a <__sseek>:
 8004a2a:	b510      	push	{r4, lr}
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a32:	f000 f855 	bl	8004ae0 <_lseek_r>
 8004a36:	1c43      	adds	r3, r0, #1
 8004a38:	89a3      	ldrh	r3, [r4, #12]
 8004a3a:	bf15      	itete	ne
 8004a3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a46:	81a3      	strheq	r3, [r4, #12]
 8004a48:	bf18      	it	ne
 8004a4a:	81a3      	strhne	r3, [r4, #12]
 8004a4c:	bd10      	pop	{r4, pc}

08004a4e <__sclose>:
 8004a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a52:	f000 b813 	b.w	8004a7c <_close_r>
	...

08004a58 <_write_r>:
 8004a58:	b538      	push	{r3, r4, r5, lr}
 8004a5a:	4d07      	ldr	r5, [pc, #28]	; (8004a78 <_write_r+0x20>)
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	4608      	mov	r0, r1
 8004a60:	4611      	mov	r1, r2
 8004a62:	2200      	movs	r2, #0
 8004a64:	602a      	str	r2, [r5, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f7fc f9ed 	bl	8000e46 <_write>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d102      	bne.n	8004a76 <_write_r+0x1e>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	b103      	cbz	r3, 8004a76 <_write_r+0x1e>
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	20000864 	.word	0x20000864

08004a7c <_close_r>:
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	4d06      	ldr	r5, [pc, #24]	; (8004a98 <_close_r+0x1c>)
 8004a80:	2300      	movs	r3, #0
 8004a82:	4604      	mov	r4, r0
 8004a84:	4608      	mov	r0, r1
 8004a86:	602b      	str	r3, [r5, #0]
 8004a88:	f7fc f9f9 	bl	8000e7e <_close>
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	d102      	bne.n	8004a96 <_close_r+0x1a>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	b103      	cbz	r3, 8004a96 <_close_r+0x1a>
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	bd38      	pop	{r3, r4, r5, pc}
 8004a98:	20000864 	.word	0x20000864

08004a9c <_fstat_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	4d07      	ldr	r5, [pc, #28]	; (8004abc <_fstat_r+0x20>)
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	4608      	mov	r0, r1
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	602b      	str	r3, [r5, #0]
 8004aaa:	f7fc f9f4 	bl	8000e96 <_fstat>
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	d102      	bne.n	8004ab8 <_fstat_r+0x1c>
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	b103      	cbz	r3, 8004ab8 <_fstat_r+0x1c>
 8004ab6:	6023      	str	r3, [r4, #0]
 8004ab8:	bd38      	pop	{r3, r4, r5, pc}
 8004aba:	bf00      	nop
 8004abc:	20000864 	.word	0x20000864

08004ac0 <_isatty_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4d06      	ldr	r5, [pc, #24]	; (8004adc <_isatty_r+0x1c>)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	4608      	mov	r0, r1
 8004aca:	602b      	str	r3, [r5, #0]
 8004acc:	f7fc f9f3 	bl	8000eb6 <_isatty>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d102      	bne.n	8004ada <_isatty_r+0x1a>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	b103      	cbz	r3, 8004ada <_isatty_r+0x1a>
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
 8004adc:	20000864 	.word	0x20000864

08004ae0 <_lseek_r>:
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 8004ae2:	4d07      	ldr	r5, [pc, #28]	; (8004b00 <_lseek_r+0x20>)
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	4608      	mov	r0, r1
 8004ae8:	4611      	mov	r1, r2
 8004aea:	2200      	movs	r2, #0
 8004aec:	602a      	str	r2, [r5, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	f7fc f9ec 	bl	8000ecc <_lseek>
 8004af4:	1c43      	adds	r3, r0, #1
 8004af6:	d102      	bne.n	8004afe <_lseek_r+0x1e>
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	b103      	cbz	r3, 8004afe <_lseek_r+0x1e>
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	bd38      	pop	{r3, r4, r5, pc}
 8004b00:	20000864 	.word	0x20000864

08004b04 <__malloc_lock>:
 8004b04:	4801      	ldr	r0, [pc, #4]	; (8004b0c <__malloc_lock+0x8>)
 8004b06:	f7ff be0b 	b.w	8004720 <__retarget_lock_acquire_recursive>
 8004b0a:	bf00      	nop
 8004b0c:	20000858 	.word	0x20000858

08004b10 <__malloc_unlock>:
 8004b10:	4801      	ldr	r0, [pc, #4]	; (8004b18 <__malloc_unlock+0x8>)
 8004b12:	f7ff be06 	b.w	8004722 <__retarget_lock_release_recursive>
 8004b16:	bf00      	nop
 8004b18:	20000858 	.word	0x20000858

08004b1c <_read_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	4d07      	ldr	r5, [pc, #28]	; (8004b3c <_read_r+0x20>)
 8004b20:	4604      	mov	r4, r0
 8004b22:	4608      	mov	r0, r1
 8004b24:	4611      	mov	r1, r2
 8004b26:	2200      	movs	r2, #0
 8004b28:	602a      	str	r2, [r5, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f7fc f96e 	bl	8000e0c <_read>
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	d102      	bne.n	8004b3a <_read_r+0x1e>
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	b103      	cbz	r3, 8004b3a <_read_r+0x1e>
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
 8004b3c:	20000864 	.word	0x20000864

08004b40 <_init>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	bf00      	nop
 8004b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b46:	bc08      	pop	{r3}
 8004b48:	469e      	mov	lr, r3
 8004b4a:	4770      	bx	lr

08004b4c <_fini>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr
